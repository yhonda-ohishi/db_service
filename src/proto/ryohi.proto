syntax = "proto3";

package ryohi;

import "google/api/annotations.proto";

option go_package = "github.com/yhonda-ohishi/db_service/src/proto";

// DTakoUriageKeihiサービス - 経費精算データ管理
service DTakoUriageKeihiService {
  // 経費精算データ作成
  rpc Create(CreateDTakoUriageKeihiRequest) returns (DTakoUriageKeihiResponse) {
    option (google.api.http) = {
      post: "/api/v1/db/dtako-uriage-keihi"
      body: "dtako_uriage_keihi"
    };
  }
  // 経費精算データ取得
  rpc Get(GetDTakoUriageKeihiRequest) returns (DTakoUriageKeihiResponse) {
    option (google.api.http) = {
      get: "/api/v1/db/dtako-uriage-keihi/{srch_id}"
    };
  }
  // 経費精算データ更新
  rpc Update(UpdateDTakoUriageKeihiRequest) returns (DTakoUriageKeihiResponse) {
    option (google.api.http) = {
      put: "/api/v1/db/dtako-uriage-keihi/{dtako_uriage_keihi.srch_id}"
      body: "dtako_uriage_keihi"
    };
  }
  // 経費精算データ削除
  rpc Delete(DeleteDTakoUriageKeihiRequest) returns (Empty) {
    option (google.api.http) = {
      delete: "/api/v1/db/dtako-uriage-keihi/{srch_id}"
    };
  }
  // 経費精算データ一覧取得
  rpc List(ListDTakoUriageKeihiRequest) returns (ListDTakoUriageKeihiResponse) {
    option (google.api.http) = {
      get: "/api/v1/db/dtako-uriage-keihi"
    };
  }
}

// ETCMeisaiサービス - ETC明細データ管理
service ETCMeisaiService {
  // ETC明細データ作成
  rpc Create(CreateETCMeisaiRequest) returns (ETCMeisaiResponse) {
    option (google.api.http) = {
      post: "/api/v1/db/etc-meisai"
      body: "etc_meisai"
    };
  }
  // ETC明細データ取得
  rpc Get(GetETCMeisaiRequest) returns (ETCMeisaiResponse) {
    option (google.api.http) = {
      get: "/api/v1/db/etc-meisai/{id}"
    };
  }
  // ETC明細データ更新
  rpc Update(UpdateETCMeisaiRequest) returns (ETCMeisaiResponse) {
    option (google.api.http) = {
      put: "/api/v1/db/etc-meisai/{etc_meisai.id}"
      body: "etc_meisai"
    };
  }
  // ETC明細データ削除
  rpc Delete(DeleteETCMeisaiRequest) returns (Empty) {
    option (google.api.http) = {
      delete: "/api/v1/db/etc-meisai/{id}"
    };
  }
  // ETC明細データ一覧取得
  rpc List(ListETCMeisaiRequest) returns (ListETCMeisaiResponse) {
    option (google.api.http) = {
      get: "/api/v1/db/etc-meisai"
    };
  }
}

// DTakoFerryRowsサービス - フェリー運行データ管理
service DTakoFerryRowsService {
  // フェリー運行データ作成
  rpc Create(CreateDTakoFerryRowsRequest) returns (DTakoFerryRowsResponse) {
    option (google.api.http) = {
      post: "/api/v1/db/dtako-ferry-rows"
      body: "dtako_ferry_rows"
    };
  }
  // フェリー運行データ取得
  rpc Get(GetDTakoFerryRowsRequest) returns (DTakoFerryRowsResponse) {
    option (google.api.http) = {
      get: "/api/v1/db/dtako-ferry-rows/{id}"
    };
  }
  // フェリー運行データ更新
  rpc Update(UpdateDTakoFerryRowsRequest) returns (DTakoFerryRowsResponse) {
    option (google.api.http) = {
      put: "/api/v1/db/dtako-ferry-rows/{dtako_ferry_rows.id}"
      body: "dtako_ferry_rows"
    };
  }
  // フェリー運行データ削除
  rpc Delete(DeleteDTakoFerryRowsRequest) returns (Empty) {
    option (google.api.http) = {
      delete: "/api/v1/db/dtako-ferry-rows/{id}"
    };
  }
  // フェリー運行データ一覧取得
  rpc List(ListDTakoFerryRowsRequest) returns (ListDTakoFerryRowsResponse) {
    option (google.api.http) = {
      get: "/api/v1/db/dtako-ferry-rows"
    };
  }
}

// ETCMeisaiMappingサービス - ETC明細とDTakoRowsのマッピング管理
service ETCMeisaiMappingService {
  // マッピング作成
  rpc Create(CreateETCMeisaiMappingRequest) returns (ETCMeisaiMappingResponse) {
    option (google.api.http) = {
      post: "/api/v1/db/etc-meisai-mapping"
      body: "etc_meisai_mapping"
    };
  }
  // マッピング取得
  rpc Get(GetETCMeisaiMappingRequest) returns (ETCMeisaiMappingResponse) {
    option (google.api.http) = {
      get: "/api/v1/db/etc-meisai-mapping/{id}"
    };
  }
  // マッピング更新
  rpc Update(UpdateETCMeisaiMappingRequest) returns (ETCMeisaiMappingResponse) {
    option (google.api.http) = {
      put: "/api/v1/db/etc-meisai-mapping/{etc_meisai_mapping.id}"
      body: "etc_meisai_mapping"
    };
  }
  // マッピング削除
  rpc Delete(DeleteETCMeisaiMappingRequest) returns (Empty) {
    option (google.api.http) = {
      delete: "/api/v1/db/etc-meisai-mapping/{id}"
    };
  }
  // マッピング一覧取得
  rpc List(ListETCMeisaiMappingRequest) returns (ListETCMeisaiMappingResponse) {
    option (google.api.http) = {
      get: "/api/v1/db/etc-meisai-mapping"
    };
  }
  // ハッシュからDTakoRowIDを取得
  rpc GetDTakoRowIDByHash(GetDTakoRowIDByHashRequest) returns (GetDTakoRowIDByHashResponse) {
    option (google.api.http) = {
      get: "/api/v1/db/etc-meisai-mapping/by-hash/{etc_meisai_hash}"
    };
  }
}

// 経費精算データ
message DTakoUriageKeihi {
  string srch_id = 1;
  string datetime = 2;  // RFC3339形式
  int32 keihi_c = 3;
  double price = 4;
  optional double km = 5;
  string dtako_row_id = 6;
  string dtako_row_id_r = 7;
  optional string start_srch_id = 8;
  optional string start_srch_time = 9;
  optional string start_srch_place = 10;
  optional string start_srch_tokui = 11;
  optional string end_srch_id = 12;
  optional string end_srch_time = 13;
  optional string end_srch_place = 14;
  optional bool manual = 15;
}

// ETC明細データ
message ETCMeisai {
  int64 id = 1;
  optional string date_fr = 2;
  string date_to = 3;  // RFC3339形式推奨 (例: 2025-10-18T00:00:00Z)
  string date_to_date = 4;  // YYYY-MM-DD形式 (例: 2025-10-18)
  optional string ic_fr = 5;  // 入口IC不明の場合は省略可（実データの22.3%が空）
  string ic_to = 6;  // 出口IC（必須）
  optional int32 price_bf = 7;
  optional int32 descount = 8;
  int32 price = 9;
  int32 shashu = 10;
  optional int32 car_id_num = 11;
  string etc_num = 12;
  optional string detail = 13;
  string hash = 14;
}

// フェリー運行データ
message DTakoFerryRows {
  int32 id = 1;
  string unko_no = 2;  // 運行NO
  string unko_date = 3;  // 運行日
  string yomitori_date = 4;  // 読取日
  int32 jigyosho_cd = 5;  // 事業所CD
  string jigyosho_name = 6;  // 事業所名
  int32 sharyo_cd = 7;  // 車輌CD
  string sharyo_name = 8;  // 車輌名
  int32 jomuin_cd1 = 9;  // 乗務員CD1
  string jomuin_name1 = 10;  // 乗務員名１
  int32 taisho_jomuin_kbn = 11;  // 対象乗務員区分
  string kaishi_datetime = 12;  // 開始日時
  string shuryo_datetime = 13;  // 終了日時
  int32 ferry_company_cd = 14;  // フェリー会社CD
  string ferry_company_name = 15;  // フェリー会社名
  int32 noriba_cd = 16;  // 乗場CD
  string noriba_name = 17;  // 乗場名
  string bin = 18;  // 便
  int32 oriba_cd = 19;  // 降場CD
  string oriba_name = 20;  // 降場名
  int32 seisan_kbn = 21;  // 精算区分
  string seisan_kbn_name = 22;  // 精算区分名
  int32 hyojun_ryokin = 23;  // 標準料金
  int32 keiyaku_ryokin = 24;  // 契約料金
  int32 koso_shashu_kbn = 25;  // 航送車種区分
  string koso_shashu_kbn_name = 26;  // 航送車種区分名
  int32 minashi_kyori = 27;  // 見なし距離
  optional string ferry_srch = 28;  // ferry_srch
}

// リクエスト/レスポンスメッセージ

// DTakoUriageKeihi用
message CreateDTakoUriageKeihiRequest {
  DTakoUriageKeihi dtako_uriage_keihi = 1;
}

message GetDTakoUriageKeihiRequest {
  string srch_id = 1;
  string datetime = 2;
  int32 keihi_c = 3;
}

message UpdateDTakoUriageKeihiRequest {
  DTakoUriageKeihi dtako_uriage_keihi = 1;
}

message DeleteDTakoUriageKeihiRequest {
  string srch_id = 1;
  string datetime = 2;
  int32 keihi_c = 3;
}

message ListDTakoUriageKeihiRequest {
  optional string dtako_row_id = 1;
  optional string start_date = 2;
  optional string end_date = 3;
  int32 limit = 4;
  int32 offset = 5;
}

message DTakoUriageKeihiResponse {
  DTakoUriageKeihi dtako_uriage_keihi = 1;
}

message ListDTakoUriageKeihiResponse {
  repeated DTakoUriageKeihi items = 1;
  int32 total_count = 2;
}

// ETCMeisai用
message CreateETCMeisaiRequest {
  ETCMeisai etc_meisai = 1;
}

message GetETCMeisaiRequest {
  int64 id = 1;
}

message UpdateETCMeisaiRequest {
  ETCMeisai etc_meisai = 1;
}

message DeleteETCMeisaiRequest {
  int64 id = 1;
}

message ListETCMeisaiRequest {
  optional string hash = 1;
  optional string start_date = 2;
  optional string end_date = 3;
  int32 limit = 4;
  int32 offset = 5;
}

message ETCMeisaiResponse {
  ETCMeisai etc_meisai = 1;
}

message ListETCMeisaiResponse {
  repeated ETCMeisai items = 1;
  int32 total_count = 2;
}

// DTakoFerryRows用
message CreateDTakoFerryRowsRequest {
  DTakoFerryRows dtako_ferry_rows = 1;
}

message GetDTakoFerryRowsRequest {
  int32 id = 1;
}

message UpdateDTakoFerryRowsRequest {
  DTakoFerryRows dtako_ferry_rows = 1;
}

message DeleteDTakoFerryRowsRequest {
  int32 id = 1;
}

message ListDTakoFerryRowsRequest {
  optional string unko_no = 1;
  optional string start_date = 2;
  optional string end_date = 3;
  int32 limit = 4;
  int32 offset = 5;
}

message DTakoFerryRowsResponse {
  DTakoFerryRows dtako_ferry_rows = 1;
}

message ListDTakoFerryRowsResponse {
  repeated DTakoFerryRows items = 1;
  int32 total_count = 2;
}

// ETC明細マッピングデータ
message ETCMeisaiMapping {
  int64 id = 1;
  string etc_meisai_hash = 2;
  string dtako_row_id = 3;
  string created_at = 4;
  string updated_at = 5;
  string created_by = 6;
  optional string notes = 7;
}

// ETCMeisaiMapping用リクエスト/レスポンス
message CreateETCMeisaiMappingRequest {
  ETCMeisaiMapping etc_meisai_mapping = 1;
}

message GetETCMeisaiMappingRequest {
  int64 id = 1;
}

message UpdateETCMeisaiMappingRequest {
  ETCMeisaiMapping etc_meisai_mapping = 1;
}

message DeleteETCMeisaiMappingRequest {
  int64 id = 1;
}

message ListETCMeisaiMappingRequest {
  optional string etc_meisai_hash = 1;
  optional string dtako_row_id = 2;
  int32 limit = 3;
  int32 offset = 4;
}

message ETCMeisaiMappingResponse {
  ETCMeisaiMapping etc_meisai_mapping = 1;
}

message ListETCMeisaiMappingResponse {
  repeated ETCMeisaiMapping items = 1;
  int32 total_count = 2;
}

message GetDTakoRowIDByHashRequest {
  string etc_meisai_hash = 1;
}

message GetDTakoRowIDByHashResponse {
  repeated string dtako_row_ids = 1;
}

// DTakoCarsサービス - 車輌マスタ管理（本番DB、読み取り専用）
service DTakoCarsService {
  // 車輌情報取得
  rpc Get(GetDTakoCarsRequest) returns (DTakoCarsResponse) {
    option (google.api.http) = {
      get: "/api/v1/db/dtako-cars/{id}"
    };
  }
  // 車輌情報一覧取得
  rpc List(ListDTakoCarsRequest) returns (ListDTakoCarsResponse) {
    option (google.api.http) = {
      get: "/api/v1/db/dtako-cars"
    };
  }
  // 車輌CDで車輌情報取得
  rpc GetByCarCode(GetDTakoCarsByCarCodeRequest) returns (DTakoCarsResponse) {
    option (google.api.http) = {
      get: "/api/v1/db/dtako-cars/by-car-code/{car_code}"
    };
  }
}

// DTakoEventsサービス - イベント情報管理（本番DB、読み取り専用）
service DTakoEventsService {
  // イベント情報取得
  rpc Get(GetDTakoEventsRequest) returns (DTakoEventsResponse) {
    option (google.api.http) = {
      get: "/api/v1/db/dtako-events/{id}"
    };
  }
  // イベント情報一覧取得
  rpc List(ListDTakoEventsRequest) returns (ListDTakoEventsResponse) {
    option (google.api.http) = {
      get: "/api/v1/db/dtako-events"
    };
  }
  // 運行NOでイベント情報取得
  rpc GetByOperationNo(GetDTakoEventsByOperationNoRequest) returns (ListDTakoEventsResponse) {
    option (google.api.http) = {
      get: "/api/v1/db/dtako-events/by-operation-no/{operation_no}"
    };
  }
}

// DTakoRowsサービス - 運行データ管理（本番DB、読み取り専用）
service DTakoRowsService {
  // 運行データ取得
  rpc Get(GetDTakoRowsRequest) returns (DTakoRowsResponse) {
    option (google.api.http) = {
      get: "/api/v1/db/dtako-rows/{id}"
    };
  }
  // 運行データ一覧取得
  rpc List(ListDTakoRowsRequest) returns (ListDTakoRowsResponse) {
    option (google.api.http) = {
      get: "/api/v1/db/dtako-rows"
    };
  }
  // 運行NOで運行データ取得
  rpc GetByOperationNo(GetDTakoRowsByOperationNoRequest) returns (ListDTakoRowsResponse) {
    option (google.api.http) = {
      get: "/api/v1/db/dtako-rows/by-operation-no/{operation_no}"
    };
  }
}

// ETCNumサービス - ETCカード番号マスタ管理（本番DB、読み取り専用）
service ETCNumService {
  // ETCカード番号一覧取得
  rpc List(ListETCNumRequest) returns (ListETCNumResponse) {
    option (google.api.http) = {
      get: "/api/v1/db/etc-num"
    };
  }
  // ETCカード番号で取得
  rpc GetByETCCardNum(GetETCNumByETCCardNumRequest) returns (ListETCNumResponse) {
    option (google.api.http) = {
      get: "/api/v1/db/etc-num/by-etc-card-num/{etc_card_num}"
    };
  }
  // 車輌IDで取得
  rpc GetByCarID(GetETCNumByCarIDRequest) returns (ListETCNumResponse) {
    option (google.api.http) = {
      get: "/api/v1/db/etc-num/by-car-id/{car_id}"
    };
  }
}

// 車輌マスタデータ（本番DB）
message DTakoCars {
  int32 id = 1;
  string car_code = 2;
  string car_cc = 3;
  string car_name = 4;
  int32 belong_office_code = 5;
  int32 highway_car_type = 6;
  int32 ferry_car_type = 7;
  int32 evaluation_class_code = 8;
  int32 idling_type = 9;
  int32 max_load_weight_kg = 10;
  int32 car_class1 = 11;
  int32 car_class2 = 12;
  int32 car_class3 = 13;
  int32 car_class4 = 14;
  int32 car_class5 = 15;
  int32 operation_type = 16;
}

// イベント情報データ（本番DB）
message DTakoEvents {
  int64 id = 1;
  string operation_no = 2;
  string read_date = 3;  // RFC3339形式
  int32 car_code = 4;
  string car_cc = 5;
  int32 target_driver_type = 6;
  int32 driver_code1 = 7;
  int32 target_driver_code = 8;
  string start_datetime = 9;  // RFC3339形式
  string end_datetime = 10;  // RFC3339形式
  optional int32 event_code = 11;
  string event_name = 12;
  double start_mileage = 13;
  double end_mileage = 14;
  int32 section_time = 15;
  double section_distance = 16;
  optional int32 start_city_code = 17;
  string start_city_name = 18;
  optional int32 end_city_code = 19;
  string end_city_name = 20;
  optional int32 start_place_code = 21;
  string start_place_name = 22;
  optional int32 end_place_code = 23;
  string end_place_name = 24;
  optional int32 start_gps_valid = 25;
  optional int64 start_gps_latitude = 26;
  optional int64 start_gps_longitude = 27;
  optional int32 end_gps_valid = 28;
  optional int64 end_gps_latitude = 29;
  optional int64 end_gps_longitude = 30;
}

// 運行データ（本番DB）
message DTakoRows {
  string id = 1;
  string operation_no = 2;
  string read_date = 3;  // RFC3339形式
  string operation_date = 4;  // RFC3339形式
  int32 car_code = 5;
  string car_cc = 6;
  optional int32 driver_code1 = 7;
  int32 target_driver_type = 8;
  int32 target_driver_code = 9;
  string start_work_datetime = 10;  // RFC3339形式
  string end_work_datetime = 11;  // RFC3339形式
  string departure_datetime = 12;  // RFC3339形式
  string return_datetime = 13;  // RFC3339形式
  double departure_meter = 14;
  double return_meter = 15;
  double total_distance = 16;
  optional double loaded_distance = 17;
  optional string destination_city_name = 18;
  optional string destination_place_name = 19;
  int32 general_road_drive_time = 20;
  int32 highway_drive_time = 21;
  int32 bypass_drive_time = 22;
  int32 loaded_drive_time = 23;
  int32 empty_drive_time = 24;
  int32 work1_time = 25;
  int32 work2_time = 26;
  int32 work3_time = 27;
  int32 work4_time = 28;
  double status1_distance = 29;
  int32 status1_time = 30;
}

// ETCカード番号データ（本番DB）
message ETCNum {
  string etc_card_num = 1;
  string car_id = 2;
  optional string start_date_time = 3;  // RFC3339形式
  optional string due_date_time = 4;  // RFC3339形式
  optional bool to_change = 5;
}

// DTakoCars用リクエスト/レスポンス
message GetDTakoCarsRequest {
  int32 id = 1;
}

message GetDTakoCarsByCarCodeRequest {
  string car_code = 1;
}

message ListDTakoCarsRequest {
  int32 limit = 1;
  int32 offset = 2;
}

message DTakoCarsResponse {
  DTakoCars dtako_cars = 1;
}

message ListDTakoCarsResponse {
  repeated DTakoCars items = 1;
  int32 total_count = 2;
}

// DTakoEvents用リクエスト/レスポンス
message GetDTakoEventsRequest {
  int64 id = 1;
}

message GetDTakoEventsByOperationNoRequest {
  string operation_no = 1;
}

message ListDTakoEventsRequest {
  int32 limit = 1;
  int32 offset = 2;
}

message DTakoEventsResponse {
  DTakoEvents dtako_events = 1;
}

message ListDTakoEventsResponse {
  repeated DTakoEvents items = 1;
  int32 total_count = 2;
}

// DTakoRows用リクエスト/レスポンス
message GetDTakoRowsRequest {
  string id = 1;
}

message GetDTakoRowsByOperationNoRequest {
  string operation_no = 1;
}

message ListDTakoRowsRequest {
  int32 limit = 1;
  int32 offset = 2;
}

message DTakoRowsResponse {
  DTakoRows dtako_rows = 1;
}

message ListDTakoRowsResponse {
  repeated DTakoRows items = 1;
  int32 total_count = 2;
}

// ETCNum用リクエスト/レスポンス
message GetETCNumByETCCardNumRequest {
  string etc_card_num = 1;
}

message GetETCNumByCarIDRequest {
  string car_id = 1;
}

message ListETCNumRequest {
  int32 limit = 1;
  int32 offset = 2;
}

message ListETCNumResponse {
  repeated ETCNum items = 1;
  int32 total_count = 2;
}

// 共通メッセージ
message Empty {}
