// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: db_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Db_DTakoUriageKeihiService_Create_FullMethodName = "/db_service.db_DTakoUriageKeihiService/Create"
	Db_DTakoUriageKeihiService_Get_FullMethodName    = "/db_service.db_DTakoUriageKeihiService/Get"
	Db_DTakoUriageKeihiService_Update_FullMethodName = "/db_service.db_DTakoUriageKeihiService/Update"
	Db_DTakoUriageKeihiService_Delete_FullMethodName = "/db_service.db_DTakoUriageKeihiService/Delete"
	Db_DTakoUriageKeihiService_List_FullMethodName   = "/db_service.db_DTakoUriageKeihiService/List"
)

// Db_DTakoUriageKeihiServiceClient is the client API for Db_DTakoUriageKeihiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// DTakoUriageKeihiサービス - 経費精算データ管理
type Db_DTakoUriageKeihiServiceClient interface {
	// 経費精算データ作成
	Create(ctx context.Context, in *Db_CreateDTakoUriageKeihiRequest, opts ...grpc.CallOption) (*Db_DTakoUriageKeihiResponse, error)
	// 経費精算データ取得
	Get(ctx context.Context, in *Db_GetDTakoUriageKeihiRequest, opts ...grpc.CallOption) (*Db_DTakoUriageKeihiResponse, error)
	// 経費精算データ更新
	Update(ctx context.Context, in *Db_UpdateDTakoUriageKeihiRequest, opts ...grpc.CallOption) (*Db_DTakoUriageKeihiResponse, error)
	// 経費精算データ削除
	Delete(ctx context.Context, in *Db_DeleteDTakoUriageKeihiRequest, opts ...grpc.CallOption) (*Db_Empty, error)
	// 経費精算データ一覧取得
	List(ctx context.Context, in *Db_ListDTakoUriageKeihiRequest, opts ...grpc.CallOption) (*Db_ListDTakoUriageKeihiResponse, error)
}

type db_DTakoUriageKeihiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDb_DTakoUriageKeihiServiceClient(cc grpc.ClientConnInterface) Db_DTakoUriageKeihiServiceClient {
	return &db_DTakoUriageKeihiServiceClient{cc}
}

func (c *db_DTakoUriageKeihiServiceClient) Create(ctx context.Context, in *Db_CreateDTakoUriageKeihiRequest, opts ...grpc.CallOption) (*Db_DTakoUriageKeihiResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Db_DTakoUriageKeihiResponse)
	err := c.cc.Invoke(ctx, Db_DTakoUriageKeihiService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *db_DTakoUriageKeihiServiceClient) Get(ctx context.Context, in *Db_GetDTakoUriageKeihiRequest, opts ...grpc.CallOption) (*Db_DTakoUriageKeihiResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Db_DTakoUriageKeihiResponse)
	err := c.cc.Invoke(ctx, Db_DTakoUriageKeihiService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *db_DTakoUriageKeihiServiceClient) Update(ctx context.Context, in *Db_UpdateDTakoUriageKeihiRequest, opts ...grpc.CallOption) (*Db_DTakoUriageKeihiResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Db_DTakoUriageKeihiResponse)
	err := c.cc.Invoke(ctx, Db_DTakoUriageKeihiService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *db_DTakoUriageKeihiServiceClient) Delete(ctx context.Context, in *Db_DeleteDTakoUriageKeihiRequest, opts ...grpc.CallOption) (*Db_Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Db_Empty)
	err := c.cc.Invoke(ctx, Db_DTakoUriageKeihiService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *db_DTakoUriageKeihiServiceClient) List(ctx context.Context, in *Db_ListDTakoUriageKeihiRequest, opts ...grpc.CallOption) (*Db_ListDTakoUriageKeihiResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Db_ListDTakoUriageKeihiResponse)
	err := c.cc.Invoke(ctx, Db_DTakoUriageKeihiService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Db_DTakoUriageKeihiServiceServer is the server API for Db_DTakoUriageKeihiService service.
// All implementations should embed UnimplementedDb_DTakoUriageKeihiServiceServer
// for forward compatibility.
//
// DTakoUriageKeihiサービス - 経費精算データ管理
type Db_DTakoUriageKeihiServiceServer interface {
	// 経費精算データ作成
	Create(context.Context, *Db_CreateDTakoUriageKeihiRequest) (*Db_DTakoUriageKeihiResponse, error)
	// 経費精算データ取得
	Get(context.Context, *Db_GetDTakoUriageKeihiRequest) (*Db_DTakoUriageKeihiResponse, error)
	// 経費精算データ更新
	Update(context.Context, *Db_UpdateDTakoUriageKeihiRequest) (*Db_DTakoUriageKeihiResponse, error)
	// 経費精算データ削除
	Delete(context.Context, *Db_DeleteDTakoUriageKeihiRequest) (*Db_Empty, error)
	// 経費精算データ一覧取得
	List(context.Context, *Db_ListDTakoUriageKeihiRequest) (*Db_ListDTakoUriageKeihiResponse, error)
}

// UnimplementedDb_DTakoUriageKeihiServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDb_DTakoUriageKeihiServiceServer struct{}

func (UnimplementedDb_DTakoUriageKeihiServiceServer) Create(context.Context, *Db_CreateDTakoUriageKeihiRequest) (*Db_DTakoUriageKeihiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedDb_DTakoUriageKeihiServiceServer) Get(context.Context, *Db_GetDTakoUriageKeihiRequest) (*Db_DTakoUriageKeihiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedDb_DTakoUriageKeihiServiceServer) Update(context.Context, *Db_UpdateDTakoUriageKeihiRequest) (*Db_DTakoUriageKeihiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedDb_DTakoUriageKeihiServiceServer) Delete(context.Context, *Db_DeleteDTakoUriageKeihiRequest) (*Db_Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedDb_DTakoUriageKeihiServiceServer) List(context.Context, *Db_ListDTakoUriageKeihiRequest) (*Db_ListDTakoUriageKeihiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedDb_DTakoUriageKeihiServiceServer) testEmbeddedByValue() {}

// UnsafeDb_DTakoUriageKeihiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Db_DTakoUriageKeihiServiceServer will
// result in compilation errors.
type UnsafeDb_DTakoUriageKeihiServiceServer interface {
	mustEmbedUnimplementedDb_DTakoUriageKeihiServiceServer()
}

func RegisterDb_DTakoUriageKeihiServiceServer(s grpc.ServiceRegistrar, srv Db_DTakoUriageKeihiServiceServer) {
	// If the following call pancis, it indicates UnimplementedDb_DTakoUriageKeihiServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Db_DTakoUriageKeihiService_ServiceDesc, srv)
}

func _Db_DTakoUriageKeihiService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Db_CreateDTakoUriageKeihiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Db_DTakoUriageKeihiServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Db_DTakoUriageKeihiService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Db_DTakoUriageKeihiServiceServer).Create(ctx, req.(*Db_CreateDTakoUriageKeihiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Db_DTakoUriageKeihiService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Db_GetDTakoUriageKeihiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Db_DTakoUriageKeihiServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Db_DTakoUriageKeihiService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Db_DTakoUriageKeihiServiceServer).Get(ctx, req.(*Db_GetDTakoUriageKeihiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Db_DTakoUriageKeihiService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Db_UpdateDTakoUriageKeihiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Db_DTakoUriageKeihiServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Db_DTakoUriageKeihiService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Db_DTakoUriageKeihiServiceServer).Update(ctx, req.(*Db_UpdateDTakoUriageKeihiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Db_DTakoUriageKeihiService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Db_DeleteDTakoUriageKeihiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Db_DTakoUriageKeihiServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Db_DTakoUriageKeihiService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Db_DTakoUriageKeihiServiceServer).Delete(ctx, req.(*Db_DeleteDTakoUriageKeihiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Db_DTakoUriageKeihiService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Db_ListDTakoUriageKeihiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Db_DTakoUriageKeihiServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Db_DTakoUriageKeihiService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Db_DTakoUriageKeihiServiceServer).List(ctx, req.(*Db_ListDTakoUriageKeihiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Db_DTakoUriageKeihiService_ServiceDesc is the grpc.ServiceDesc for Db_DTakoUriageKeihiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Db_DTakoUriageKeihiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "db_service.db_DTakoUriageKeihiService",
	HandlerType: (*Db_DTakoUriageKeihiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Db_DTakoUriageKeihiService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Db_DTakoUriageKeihiService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Db_DTakoUriageKeihiService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Db_DTakoUriageKeihiService_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Db_DTakoUriageKeihiService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "db_service.proto",
}

const (
	Db_ETCMeisaiService_Create_FullMethodName = "/db_service.db_ETCMeisaiService/Create"
	Db_ETCMeisaiService_Get_FullMethodName    = "/db_service.db_ETCMeisaiService/Get"
	Db_ETCMeisaiService_Update_FullMethodName = "/db_service.db_ETCMeisaiService/Update"
	Db_ETCMeisaiService_Delete_FullMethodName = "/db_service.db_ETCMeisaiService/Delete"
	Db_ETCMeisaiService_List_FullMethodName   = "/db_service.db_ETCMeisaiService/List"
)

// Db_ETCMeisaiServiceClient is the client API for Db_ETCMeisaiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ETCMeisaiサービス - ETC明細データ管理
type Db_ETCMeisaiServiceClient interface {
	// ETC明細データ作成
	Create(ctx context.Context, in *Db_CreateETCMeisaiRequest, opts ...grpc.CallOption) (*Db_ETCMeisaiResponse, error)
	// ETC明細データ取得
	Get(ctx context.Context, in *Db_GetETCMeisaiRequest, opts ...grpc.CallOption) (*Db_ETCMeisaiResponse, error)
	// ETC明細データ更新
	Update(ctx context.Context, in *Db_UpdateETCMeisaiRequest, opts ...grpc.CallOption) (*Db_ETCMeisaiResponse, error)
	// ETC明細データ削除
	Delete(ctx context.Context, in *Db_DeleteETCMeisaiRequest, opts ...grpc.CallOption) (*Db_Empty, error)
	// ETC明細データ一覧取得
	List(ctx context.Context, in *Db_ListETCMeisaiRequest, opts ...grpc.CallOption) (*Db_ListETCMeisaiResponse, error)
}

type db_ETCMeisaiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDb_ETCMeisaiServiceClient(cc grpc.ClientConnInterface) Db_ETCMeisaiServiceClient {
	return &db_ETCMeisaiServiceClient{cc}
}

func (c *db_ETCMeisaiServiceClient) Create(ctx context.Context, in *Db_CreateETCMeisaiRequest, opts ...grpc.CallOption) (*Db_ETCMeisaiResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Db_ETCMeisaiResponse)
	err := c.cc.Invoke(ctx, Db_ETCMeisaiService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *db_ETCMeisaiServiceClient) Get(ctx context.Context, in *Db_GetETCMeisaiRequest, opts ...grpc.CallOption) (*Db_ETCMeisaiResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Db_ETCMeisaiResponse)
	err := c.cc.Invoke(ctx, Db_ETCMeisaiService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *db_ETCMeisaiServiceClient) Update(ctx context.Context, in *Db_UpdateETCMeisaiRequest, opts ...grpc.CallOption) (*Db_ETCMeisaiResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Db_ETCMeisaiResponse)
	err := c.cc.Invoke(ctx, Db_ETCMeisaiService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *db_ETCMeisaiServiceClient) Delete(ctx context.Context, in *Db_DeleteETCMeisaiRequest, opts ...grpc.CallOption) (*Db_Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Db_Empty)
	err := c.cc.Invoke(ctx, Db_ETCMeisaiService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *db_ETCMeisaiServiceClient) List(ctx context.Context, in *Db_ListETCMeisaiRequest, opts ...grpc.CallOption) (*Db_ListETCMeisaiResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Db_ListETCMeisaiResponse)
	err := c.cc.Invoke(ctx, Db_ETCMeisaiService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Db_ETCMeisaiServiceServer is the server API for Db_ETCMeisaiService service.
// All implementations should embed UnimplementedDb_ETCMeisaiServiceServer
// for forward compatibility.
//
// ETCMeisaiサービス - ETC明細データ管理
type Db_ETCMeisaiServiceServer interface {
	// ETC明細データ作成
	Create(context.Context, *Db_CreateETCMeisaiRequest) (*Db_ETCMeisaiResponse, error)
	// ETC明細データ取得
	Get(context.Context, *Db_GetETCMeisaiRequest) (*Db_ETCMeisaiResponse, error)
	// ETC明細データ更新
	Update(context.Context, *Db_UpdateETCMeisaiRequest) (*Db_ETCMeisaiResponse, error)
	// ETC明細データ削除
	Delete(context.Context, *Db_DeleteETCMeisaiRequest) (*Db_Empty, error)
	// ETC明細データ一覧取得
	List(context.Context, *Db_ListETCMeisaiRequest) (*Db_ListETCMeisaiResponse, error)
}

// UnimplementedDb_ETCMeisaiServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDb_ETCMeisaiServiceServer struct{}

func (UnimplementedDb_ETCMeisaiServiceServer) Create(context.Context, *Db_CreateETCMeisaiRequest) (*Db_ETCMeisaiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedDb_ETCMeisaiServiceServer) Get(context.Context, *Db_GetETCMeisaiRequest) (*Db_ETCMeisaiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedDb_ETCMeisaiServiceServer) Update(context.Context, *Db_UpdateETCMeisaiRequest) (*Db_ETCMeisaiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedDb_ETCMeisaiServiceServer) Delete(context.Context, *Db_DeleteETCMeisaiRequest) (*Db_Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedDb_ETCMeisaiServiceServer) List(context.Context, *Db_ListETCMeisaiRequest) (*Db_ListETCMeisaiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedDb_ETCMeisaiServiceServer) testEmbeddedByValue() {}

// UnsafeDb_ETCMeisaiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Db_ETCMeisaiServiceServer will
// result in compilation errors.
type UnsafeDb_ETCMeisaiServiceServer interface {
	mustEmbedUnimplementedDb_ETCMeisaiServiceServer()
}

func RegisterDb_ETCMeisaiServiceServer(s grpc.ServiceRegistrar, srv Db_ETCMeisaiServiceServer) {
	// If the following call pancis, it indicates UnimplementedDb_ETCMeisaiServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Db_ETCMeisaiService_ServiceDesc, srv)
}

func _Db_ETCMeisaiService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Db_CreateETCMeisaiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Db_ETCMeisaiServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Db_ETCMeisaiService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Db_ETCMeisaiServiceServer).Create(ctx, req.(*Db_CreateETCMeisaiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Db_ETCMeisaiService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Db_GetETCMeisaiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Db_ETCMeisaiServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Db_ETCMeisaiService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Db_ETCMeisaiServiceServer).Get(ctx, req.(*Db_GetETCMeisaiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Db_ETCMeisaiService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Db_UpdateETCMeisaiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Db_ETCMeisaiServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Db_ETCMeisaiService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Db_ETCMeisaiServiceServer).Update(ctx, req.(*Db_UpdateETCMeisaiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Db_ETCMeisaiService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Db_DeleteETCMeisaiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Db_ETCMeisaiServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Db_ETCMeisaiService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Db_ETCMeisaiServiceServer).Delete(ctx, req.(*Db_DeleteETCMeisaiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Db_ETCMeisaiService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Db_ListETCMeisaiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Db_ETCMeisaiServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Db_ETCMeisaiService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Db_ETCMeisaiServiceServer).List(ctx, req.(*Db_ListETCMeisaiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Db_ETCMeisaiService_ServiceDesc is the grpc.ServiceDesc for Db_ETCMeisaiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Db_ETCMeisaiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "db_service.db_ETCMeisaiService",
	HandlerType: (*Db_ETCMeisaiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Db_ETCMeisaiService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Db_ETCMeisaiService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Db_ETCMeisaiService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Db_ETCMeisaiService_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Db_ETCMeisaiService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "db_service.proto",
}

const (
	Db_DTakoFerryRowsService_Create_FullMethodName = "/db_service.db_DTakoFerryRowsService/Create"
	Db_DTakoFerryRowsService_Get_FullMethodName    = "/db_service.db_DTakoFerryRowsService/Get"
	Db_DTakoFerryRowsService_Update_FullMethodName = "/db_service.db_DTakoFerryRowsService/Update"
	Db_DTakoFerryRowsService_Delete_FullMethodName = "/db_service.db_DTakoFerryRowsService/Delete"
	Db_DTakoFerryRowsService_List_FullMethodName   = "/db_service.db_DTakoFerryRowsService/List"
)

// Db_DTakoFerryRowsServiceClient is the client API for Db_DTakoFerryRowsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// DTakoFerryRowsサービス - フェリー運行データ管理
type Db_DTakoFerryRowsServiceClient interface {
	// フェリー運行データ作成
	Create(ctx context.Context, in *Db_CreateDTakoFerryRowsRequest, opts ...grpc.CallOption) (*Db_DTakoFerryRowsResponse, error)
	// フェリー運行データ取得
	Get(ctx context.Context, in *Db_GetDTakoFerryRowsRequest, opts ...grpc.CallOption) (*Db_DTakoFerryRowsResponse, error)
	// フェリー運行データ更新
	Update(ctx context.Context, in *Db_UpdateDTakoFerryRowsRequest, opts ...grpc.CallOption) (*Db_DTakoFerryRowsResponse, error)
	// フェリー運行データ削除
	Delete(ctx context.Context, in *Db_DeleteDTakoFerryRowsRequest, opts ...grpc.CallOption) (*Db_Empty, error)
	// フェリー運行データ一覧取得
	List(ctx context.Context, in *Db_ListDTakoFerryRowsRequest, opts ...grpc.CallOption) (*Db_ListDTakoFerryRowsResponse, error)
}

type db_DTakoFerryRowsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDb_DTakoFerryRowsServiceClient(cc grpc.ClientConnInterface) Db_DTakoFerryRowsServiceClient {
	return &db_DTakoFerryRowsServiceClient{cc}
}

func (c *db_DTakoFerryRowsServiceClient) Create(ctx context.Context, in *Db_CreateDTakoFerryRowsRequest, opts ...grpc.CallOption) (*Db_DTakoFerryRowsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Db_DTakoFerryRowsResponse)
	err := c.cc.Invoke(ctx, Db_DTakoFerryRowsService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *db_DTakoFerryRowsServiceClient) Get(ctx context.Context, in *Db_GetDTakoFerryRowsRequest, opts ...grpc.CallOption) (*Db_DTakoFerryRowsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Db_DTakoFerryRowsResponse)
	err := c.cc.Invoke(ctx, Db_DTakoFerryRowsService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *db_DTakoFerryRowsServiceClient) Update(ctx context.Context, in *Db_UpdateDTakoFerryRowsRequest, opts ...grpc.CallOption) (*Db_DTakoFerryRowsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Db_DTakoFerryRowsResponse)
	err := c.cc.Invoke(ctx, Db_DTakoFerryRowsService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *db_DTakoFerryRowsServiceClient) Delete(ctx context.Context, in *Db_DeleteDTakoFerryRowsRequest, opts ...grpc.CallOption) (*Db_Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Db_Empty)
	err := c.cc.Invoke(ctx, Db_DTakoFerryRowsService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *db_DTakoFerryRowsServiceClient) List(ctx context.Context, in *Db_ListDTakoFerryRowsRequest, opts ...grpc.CallOption) (*Db_ListDTakoFerryRowsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Db_ListDTakoFerryRowsResponse)
	err := c.cc.Invoke(ctx, Db_DTakoFerryRowsService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Db_DTakoFerryRowsServiceServer is the server API for Db_DTakoFerryRowsService service.
// All implementations should embed UnimplementedDb_DTakoFerryRowsServiceServer
// for forward compatibility.
//
// DTakoFerryRowsサービス - フェリー運行データ管理
type Db_DTakoFerryRowsServiceServer interface {
	// フェリー運行データ作成
	Create(context.Context, *Db_CreateDTakoFerryRowsRequest) (*Db_DTakoFerryRowsResponse, error)
	// フェリー運行データ取得
	Get(context.Context, *Db_GetDTakoFerryRowsRequest) (*Db_DTakoFerryRowsResponse, error)
	// フェリー運行データ更新
	Update(context.Context, *Db_UpdateDTakoFerryRowsRequest) (*Db_DTakoFerryRowsResponse, error)
	// フェリー運行データ削除
	Delete(context.Context, *Db_DeleteDTakoFerryRowsRequest) (*Db_Empty, error)
	// フェリー運行データ一覧取得
	List(context.Context, *Db_ListDTakoFerryRowsRequest) (*Db_ListDTakoFerryRowsResponse, error)
}

// UnimplementedDb_DTakoFerryRowsServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDb_DTakoFerryRowsServiceServer struct{}

func (UnimplementedDb_DTakoFerryRowsServiceServer) Create(context.Context, *Db_CreateDTakoFerryRowsRequest) (*Db_DTakoFerryRowsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedDb_DTakoFerryRowsServiceServer) Get(context.Context, *Db_GetDTakoFerryRowsRequest) (*Db_DTakoFerryRowsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedDb_DTakoFerryRowsServiceServer) Update(context.Context, *Db_UpdateDTakoFerryRowsRequest) (*Db_DTakoFerryRowsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedDb_DTakoFerryRowsServiceServer) Delete(context.Context, *Db_DeleteDTakoFerryRowsRequest) (*Db_Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedDb_DTakoFerryRowsServiceServer) List(context.Context, *Db_ListDTakoFerryRowsRequest) (*Db_ListDTakoFerryRowsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedDb_DTakoFerryRowsServiceServer) testEmbeddedByValue() {}

// UnsafeDb_DTakoFerryRowsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Db_DTakoFerryRowsServiceServer will
// result in compilation errors.
type UnsafeDb_DTakoFerryRowsServiceServer interface {
	mustEmbedUnimplementedDb_DTakoFerryRowsServiceServer()
}

func RegisterDb_DTakoFerryRowsServiceServer(s grpc.ServiceRegistrar, srv Db_DTakoFerryRowsServiceServer) {
	// If the following call pancis, it indicates UnimplementedDb_DTakoFerryRowsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Db_DTakoFerryRowsService_ServiceDesc, srv)
}

func _Db_DTakoFerryRowsService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Db_CreateDTakoFerryRowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Db_DTakoFerryRowsServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Db_DTakoFerryRowsService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Db_DTakoFerryRowsServiceServer).Create(ctx, req.(*Db_CreateDTakoFerryRowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Db_DTakoFerryRowsService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Db_GetDTakoFerryRowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Db_DTakoFerryRowsServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Db_DTakoFerryRowsService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Db_DTakoFerryRowsServiceServer).Get(ctx, req.(*Db_GetDTakoFerryRowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Db_DTakoFerryRowsService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Db_UpdateDTakoFerryRowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Db_DTakoFerryRowsServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Db_DTakoFerryRowsService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Db_DTakoFerryRowsServiceServer).Update(ctx, req.(*Db_UpdateDTakoFerryRowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Db_DTakoFerryRowsService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Db_DeleteDTakoFerryRowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Db_DTakoFerryRowsServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Db_DTakoFerryRowsService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Db_DTakoFerryRowsServiceServer).Delete(ctx, req.(*Db_DeleteDTakoFerryRowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Db_DTakoFerryRowsService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Db_ListDTakoFerryRowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Db_DTakoFerryRowsServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Db_DTakoFerryRowsService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Db_DTakoFerryRowsServiceServer).List(ctx, req.(*Db_ListDTakoFerryRowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Db_DTakoFerryRowsService_ServiceDesc is the grpc.ServiceDesc for Db_DTakoFerryRowsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Db_DTakoFerryRowsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "db_service.db_DTakoFerryRowsService",
	HandlerType: (*Db_DTakoFerryRowsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Db_DTakoFerryRowsService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Db_DTakoFerryRowsService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Db_DTakoFerryRowsService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Db_DTakoFerryRowsService_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Db_DTakoFerryRowsService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "db_service.proto",
}

const (
	Db_ETCMeisaiMappingService_Create_FullMethodName              = "/db_service.db_ETCMeisaiMappingService/Create"
	Db_ETCMeisaiMappingService_Get_FullMethodName                 = "/db_service.db_ETCMeisaiMappingService/Get"
	Db_ETCMeisaiMappingService_Update_FullMethodName              = "/db_service.db_ETCMeisaiMappingService/Update"
	Db_ETCMeisaiMappingService_Delete_FullMethodName              = "/db_service.db_ETCMeisaiMappingService/Delete"
	Db_ETCMeisaiMappingService_List_FullMethodName                = "/db_service.db_ETCMeisaiMappingService/List"
	Db_ETCMeisaiMappingService_GetDTakoRowIDByHash_FullMethodName = "/db_service.db_ETCMeisaiMappingService/GetDTakoRowIDByHash"
)

// Db_ETCMeisaiMappingServiceClient is the client API for Db_ETCMeisaiMappingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ETCMeisaiMappingサービス - ETC明細とDTakoRowsのマッピング管理
type Db_ETCMeisaiMappingServiceClient interface {
	// マッピング作成
	Create(ctx context.Context, in *Db_CreateETCMeisaiMappingRequest, opts ...grpc.CallOption) (*Db_ETCMeisaiMappingResponse, error)
	// マッピング取得
	Get(ctx context.Context, in *Db_GetETCMeisaiMappingRequest, opts ...grpc.CallOption) (*Db_ETCMeisaiMappingResponse, error)
	// マッピング更新
	Update(ctx context.Context, in *Db_UpdateETCMeisaiMappingRequest, opts ...grpc.CallOption) (*Db_ETCMeisaiMappingResponse, error)
	// マッピング削除
	Delete(ctx context.Context, in *Db_DeleteETCMeisaiMappingRequest, opts ...grpc.CallOption) (*Db_Empty, error)
	// マッピング一覧取得
	List(ctx context.Context, in *Db_ListETCMeisaiMappingRequest, opts ...grpc.CallOption) (*Db_ListETCMeisaiMappingResponse, error)
	// ハッシュからDTakoRowIDを取得
	GetDTakoRowIDByHash(ctx context.Context, in *Db_GetDTakoRowIDByHashRequest, opts ...grpc.CallOption) (*Db_GetDTakoRowIDByHashResponse, error)
}

type db_ETCMeisaiMappingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDb_ETCMeisaiMappingServiceClient(cc grpc.ClientConnInterface) Db_ETCMeisaiMappingServiceClient {
	return &db_ETCMeisaiMappingServiceClient{cc}
}

func (c *db_ETCMeisaiMappingServiceClient) Create(ctx context.Context, in *Db_CreateETCMeisaiMappingRequest, opts ...grpc.CallOption) (*Db_ETCMeisaiMappingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Db_ETCMeisaiMappingResponse)
	err := c.cc.Invoke(ctx, Db_ETCMeisaiMappingService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *db_ETCMeisaiMappingServiceClient) Get(ctx context.Context, in *Db_GetETCMeisaiMappingRequest, opts ...grpc.CallOption) (*Db_ETCMeisaiMappingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Db_ETCMeisaiMappingResponse)
	err := c.cc.Invoke(ctx, Db_ETCMeisaiMappingService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *db_ETCMeisaiMappingServiceClient) Update(ctx context.Context, in *Db_UpdateETCMeisaiMappingRequest, opts ...grpc.CallOption) (*Db_ETCMeisaiMappingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Db_ETCMeisaiMappingResponse)
	err := c.cc.Invoke(ctx, Db_ETCMeisaiMappingService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *db_ETCMeisaiMappingServiceClient) Delete(ctx context.Context, in *Db_DeleteETCMeisaiMappingRequest, opts ...grpc.CallOption) (*Db_Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Db_Empty)
	err := c.cc.Invoke(ctx, Db_ETCMeisaiMappingService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *db_ETCMeisaiMappingServiceClient) List(ctx context.Context, in *Db_ListETCMeisaiMappingRequest, opts ...grpc.CallOption) (*Db_ListETCMeisaiMappingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Db_ListETCMeisaiMappingResponse)
	err := c.cc.Invoke(ctx, Db_ETCMeisaiMappingService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *db_ETCMeisaiMappingServiceClient) GetDTakoRowIDByHash(ctx context.Context, in *Db_GetDTakoRowIDByHashRequest, opts ...grpc.CallOption) (*Db_GetDTakoRowIDByHashResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Db_GetDTakoRowIDByHashResponse)
	err := c.cc.Invoke(ctx, Db_ETCMeisaiMappingService_GetDTakoRowIDByHash_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Db_ETCMeisaiMappingServiceServer is the server API for Db_ETCMeisaiMappingService service.
// All implementations should embed UnimplementedDb_ETCMeisaiMappingServiceServer
// for forward compatibility.
//
// ETCMeisaiMappingサービス - ETC明細とDTakoRowsのマッピング管理
type Db_ETCMeisaiMappingServiceServer interface {
	// マッピング作成
	Create(context.Context, *Db_CreateETCMeisaiMappingRequest) (*Db_ETCMeisaiMappingResponse, error)
	// マッピング取得
	Get(context.Context, *Db_GetETCMeisaiMappingRequest) (*Db_ETCMeisaiMappingResponse, error)
	// マッピング更新
	Update(context.Context, *Db_UpdateETCMeisaiMappingRequest) (*Db_ETCMeisaiMappingResponse, error)
	// マッピング削除
	Delete(context.Context, *Db_DeleteETCMeisaiMappingRequest) (*Db_Empty, error)
	// マッピング一覧取得
	List(context.Context, *Db_ListETCMeisaiMappingRequest) (*Db_ListETCMeisaiMappingResponse, error)
	// ハッシュからDTakoRowIDを取得
	GetDTakoRowIDByHash(context.Context, *Db_GetDTakoRowIDByHashRequest) (*Db_GetDTakoRowIDByHashResponse, error)
}

// UnimplementedDb_ETCMeisaiMappingServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDb_ETCMeisaiMappingServiceServer struct{}

func (UnimplementedDb_ETCMeisaiMappingServiceServer) Create(context.Context, *Db_CreateETCMeisaiMappingRequest) (*Db_ETCMeisaiMappingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedDb_ETCMeisaiMappingServiceServer) Get(context.Context, *Db_GetETCMeisaiMappingRequest) (*Db_ETCMeisaiMappingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedDb_ETCMeisaiMappingServiceServer) Update(context.Context, *Db_UpdateETCMeisaiMappingRequest) (*Db_ETCMeisaiMappingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedDb_ETCMeisaiMappingServiceServer) Delete(context.Context, *Db_DeleteETCMeisaiMappingRequest) (*Db_Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedDb_ETCMeisaiMappingServiceServer) List(context.Context, *Db_ListETCMeisaiMappingRequest) (*Db_ListETCMeisaiMappingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedDb_ETCMeisaiMappingServiceServer) GetDTakoRowIDByHash(context.Context, *Db_GetDTakoRowIDByHashRequest) (*Db_GetDTakoRowIDByHashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDTakoRowIDByHash not implemented")
}
func (UnimplementedDb_ETCMeisaiMappingServiceServer) testEmbeddedByValue() {}

// UnsafeDb_ETCMeisaiMappingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Db_ETCMeisaiMappingServiceServer will
// result in compilation errors.
type UnsafeDb_ETCMeisaiMappingServiceServer interface {
	mustEmbedUnimplementedDb_ETCMeisaiMappingServiceServer()
}

func RegisterDb_ETCMeisaiMappingServiceServer(s grpc.ServiceRegistrar, srv Db_ETCMeisaiMappingServiceServer) {
	// If the following call pancis, it indicates UnimplementedDb_ETCMeisaiMappingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Db_ETCMeisaiMappingService_ServiceDesc, srv)
}

func _Db_ETCMeisaiMappingService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Db_CreateETCMeisaiMappingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Db_ETCMeisaiMappingServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Db_ETCMeisaiMappingService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Db_ETCMeisaiMappingServiceServer).Create(ctx, req.(*Db_CreateETCMeisaiMappingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Db_ETCMeisaiMappingService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Db_GetETCMeisaiMappingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Db_ETCMeisaiMappingServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Db_ETCMeisaiMappingService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Db_ETCMeisaiMappingServiceServer).Get(ctx, req.(*Db_GetETCMeisaiMappingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Db_ETCMeisaiMappingService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Db_UpdateETCMeisaiMappingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Db_ETCMeisaiMappingServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Db_ETCMeisaiMappingService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Db_ETCMeisaiMappingServiceServer).Update(ctx, req.(*Db_UpdateETCMeisaiMappingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Db_ETCMeisaiMappingService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Db_DeleteETCMeisaiMappingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Db_ETCMeisaiMappingServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Db_ETCMeisaiMappingService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Db_ETCMeisaiMappingServiceServer).Delete(ctx, req.(*Db_DeleteETCMeisaiMappingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Db_ETCMeisaiMappingService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Db_ListETCMeisaiMappingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Db_ETCMeisaiMappingServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Db_ETCMeisaiMappingService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Db_ETCMeisaiMappingServiceServer).List(ctx, req.(*Db_ListETCMeisaiMappingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Db_ETCMeisaiMappingService_GetDTakoRowIDByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Db_GetDTakoRowIDByHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Db_ETCMeisaiMappingServiceServer).GetDTakoRowIDByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Db_ETCMeisaiMappingService_GetDTakoRowIDByHash_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Db_ETCMeisaiMappingServiceServer).GetDTakoRowIDByHash(ctx, req.(*Db_GetDTakoRowIDByHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Db_ETCMeisaiMappingService_ServiceDesc is the grpc.ServiceDesc for Db_ETCMeisaiMappingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Db_ETCMeisaiMappingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "db_service.db_ETCMeisaiMappingService",
	HandlerType: (*Db_ETCMeisaiMappingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Db_ETCMeisaiMappingService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Db_ETCMeisaiMappingService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Db_ETCMeisaiMappingService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Db_ETCMeisaiMappingService_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Db_ETCMeisaiMappingService_List_Handler,
		},
		{
			MethodName: "GetDTakoRowIDByHash",
			Handler:    _Db_ETCMeisaiMappingService_GetDTakoRowIDByHash_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "db_service.proto",
}

const (
	Db_DTakoCarsService_Get_FullMethodName          = "/db_service.db_DTakoCarsService/Get"
	Db_DTakoCarsService_List_FullMethodName         = "/db_service.db_DTakoCarsService/List"
	Db_DTakoCarsService_GetByCarCode_FullMethodName = "/db_service.db_DTakoCarsService/GetByCarCode"
)

// Db_DTakoCarsServiceClient is the client API for Db_DTakoCarsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// DTakoCarsサービス - 車輌マスタ管理（本番DB、読み取り専用）
type Db_DTakoCarsServiceClient interface {
	// 車輌情報取得
	Get(ctx context.Context, in *Db_GetDTakoCarsRequest, opts ...grpc.CallOption) (*Db_DTakoCarsResponse, error)
	// 車輌情報一覧取得
	List(ctx context.Context, in *Db_ListDTakoCarsRequest, opts ...grpc.CallOption) (*Db_ListDTakoCarsResponse, error)
	// 車輌CDで車輌情報取得
	GetByCarCode(ctx context.Context, in *Db_GetDTakoCarsByCarCodeRequest, opts ...grpc.CallOption) (*Db_DTakoCarsResponse, error)
}

type db_DTakoCarsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDb_DTakoCarsServiceClient(cc grpc.ClientConnInterface) Db_DTakoCarsServiceClient {
	return &db_DTakoCarsServiceClient{cc}
}

func (c *db_DTakoCarsServiceClient) Get(ctx context.Context, in *Db_GetDTakoCarsRequest, opts ...grpc.CallOption) (*Db_DTakoCarsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Db_DTakoCarsResponse)
	err := c.cc.Invoke(ctx, Db_DTakoCarsService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *db_DTakoCarsServiceClient) List(ctx context.Context, in *Db_ListDTakoCarsRequest, opts ...grpc.CallOption) (*Db_ListDTakoCarsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Db_ListDTakoCarsResponse)
	err := c.cc.Invoke(ctx, Db_DTakoCarsService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *db_DTakoCarsServiceClient) GetByCarCode(ctx context.Context, in *Db_GetDTakoCarsByCarCodeRequest, opts ...grpc.CallOption) (*Db_DTakoCarsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Db_DTakoCarsResponse)
	err := c.cc.Invoke(ctx, Db_DTakoCarsService_GetByCarCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Db_DTakoCarsServiceServer is the server API for Db_DTakoCarsService service.
// All implementations should embed UnimplementedDb_DTakoCarsServiceServer
// for forward compatibility.
//
// DTakoCarsサービス - 車輌マスタ管理（本番DB、読み取り専用）
type Db_DTakoCarsServiceServer interface {
	// 車輌情報取得
	Get(context.Context, *Db_GetDTakoCarsRequest) (*Db_DTakoCarsResponse, error)
	// 車輌情報一覧取得
	List(context.Context, *Db_ListDTakoCarsRequest) (*Db_ListDTakoCarsResponse, error)
	// 車輌CDで車輌情報取得
	GetByCarCode(context.Context, *Db_GetDTakoCarsByCarCodeRequest) (*Db_DTakoCarsResponse, error)
}

// UnimplementedDb_DTakoCarsServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDb_DTakoCarsServiceServer struct{}

func (UnimplementedDb_DTakoCarsServiceServer) Get(context.Context, *Db_GetDTakoCarsRequest) (*Db_DTakoCarsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedDb_DTakoCarsServiceServer) List(context.Context, *Db_ListDTakoCarsRequest) (*Db_ListDTakoCarsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedDb_DTakoCarsServiceServer) GetByCarCode(context.Context, *Db_GetDTakoCarsByCarCodeRequest) (*Db_DTakoCarsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByCarCode not implemented")
}
func (UnimplementedDb_DTakoCarsServiceServer) testEmbeddedByValue() {}

// UnsafeDb_DTakoCarsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Db_DTakoCarsServiceServer will
// result in compilation errors.
type UnsafeDb_DTakoCarsServiceServer interface {
	mustEmbedUnimplementedDb_DTakoCarsServiceServer()
}

func RegisterDb_DTakoCarsServiceServer(s grpc.ServiceRegistrar, srv Db_DTakoCarsServiceServer) {
	// If the following call pancis, it indicates UnimplementedDb_DTakoCarsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Db_DTakoCarsService_ServiceDesc, srv)
}

func _Db_DTakoCarsService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Db_GetDTakoCarsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Db_DTakoCarsServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Db_DTakoCarsService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Db_DTakoCarsServiceServer).Get(ctx, req.(*Db_GetDTakoCarsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Db_DTakoCarsService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Db_ListDTakoCarsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Db_DTakoCarsServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Db_DTakoCarsService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Db_DTakoCarsServiceServer).List(ctx, req.(*Db_ListDTakoCarsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Db_DTakoCarsService_GetByCarCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Db_GetDTakoCarsByCarCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Db_DTakoCarsServiceServer).GetByCarCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Db_DTakoCarsService_GetByCarCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Db_DTakoCarsServiceServer).GetByCarCode(ctx, req.(*Db_GetDTakoCarsByCarCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Db_DTakoCarsService_ServiceDesc is the grpc.ServiceDesc for Db_DTakoCarsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Db_DTakoCarsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "db_service.db_DTakoCarsService",
	HandlerType: (*Db_DTakoCarsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Db_DTakoCarsService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Db_DTakoCarsService_List_Handler,
		},
		{
			MethodName: "GetByCarCode",
			Handler:    _Db_DTakoCarsService_GetByCarCode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "db_service.proto",
}

const (
	Db_DTakoEventsService_Get_FullMethodName              = "/db_service.db_DTakoEventsService/Get"
	Db_DTakoEventsService_List_FullMethodName             = "/db_service.db_DTakoEventsService/List"
	Db_DTakoEventsService_GetByOperationNo_FullMethodName = "/db_service.db_DTakoEventsService/GetByOperationNo"
)

// Db_DTakoEventsServiceClient is the client API for Db_DTakoEventsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// DTakoEventsサービス - イベント情報管理（本番DB、読み取り専用）
type Db_DTakoEventsServiceClient interface {
	// イベント情報取得
	Get(ctx context.Context, in *Db_GetDTakoEventsRequest, opts ...grpc.CallOption) (*Db_DTakoEventsResponse, error)
	// イベント情報一覧取得
	List(ctx context.Context, in *Db_ListDTakoEventsRequest, opts ...grpc.CallOption) (*Db_ListDTakoEventsResponse, error)
	// 運行NOでイベント情報取得
	GetByOperationNo(ctx context.Context, in *Db_GetDTakoEventsByOperationNoRequest, opts ...grpc.CallOption) (*Db_ListDTakoEventsResponse, error)
}

type db_DTakoEventsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDb_DTakoEventsServiceClient(cc grpc.ClientConnInterface) Db_DTakoEventsServiceClient {
	return &db_DTakoEventsServiceClient{cc}
}

func (c *db_DTakoEventsServiceClient) Get(ctx context.Context, in *Db_GetDTakoEventsRequest, opts ...grpc.CallOption) (*Db_DTakoEventsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Db_DTakoEventsResponse)
	err := c.cc.Invoke(ctx, Db_DTakoEventsService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *db_DTakoEventsServiceClient) List(ctx context.Context, in *Db_ListDTakoEventsRequest, opts ...grpc.CallOption) (*Db_ListDTakoEventsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Db_ListDTakoEventsResponse)
	err := c.cc.Invoke(ctx, Db_DTakoEventsService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *db_DTakoEventsServiceClient) GetByOperationNo(ctx context.Context, in *Db_GetDTakoEventsByOperationNoRequest, opts ...grpc.CallOption) (*Db_ListDTakoEventsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Db_ListDTakoEventsResponse)
	err := c.cc.Invoke(ctx, Db_DTakoEventsService_GetByOperationNo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Db_DTakoEventsServiceServer is the server API for Db_DTakoEventsService service.
// All implementations should embed UnimplementedDb_DTakoEventsServiceServer
// for forward compatibility.
//
// DTakoEventsサービス - イベント情報管理（本番DB、読み取り専用）
type Db_DTakoEventsServiceServer interface {
	// イベント情報取得
	Get(context.Context, *Db_GetDTakoEventsRequest) (*Db_DTakoEventsResponse, error)
	// イベント情報一覧取得
	List(context.Context, *Db_ListDTakoEventsRequest) (*Db_ListDTakoEventsResponse, error)
	// 運行NOでイベント情報取得
	GetByOperationNo(context.Context, *Db_GetDTakoEventsByOperationNoRequest) (*Db_ListDTakoEventsResponse, error)
}

// UnimplementedDb_DTakoEventsServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDb_DTakoEventsServiceServer struct{}

func (UnimplementedDb_DTakoEventsServiceServer) Get(context.Context, *Db_GetDTakoEventsRequest) (*Db_DTakoEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedDb_DTakoEventsServiceServer) List(context.Context, *Db_ListDTakoEventsRequest) (*Db_ListDTakoEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedDb_DTakoEventsServiceServer) GetByOperationNo(context.Context, *Db_GetDTakoEventsByOperationNoRequest) (*Db_ListDTakoEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByOperationNo not implemented")
}
func (UnimplementedDb_DTakoEventsServiceServer) testEmbeddedByValue() {}

// UnsafeDb_DTakoEventsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Db_DTakoEventsServiceServer will
// result in compilation errors.
type UnsafeDb_DTakoEventsServiceServer interface {
	mustEmbedUnimplementedDb_DTakoEventsServiceServer()
}

func RegisterDb_DTakoEventsServiceServer(s grpc.ServiceRegistrar, srv Db_DTakoEventsServiceServer) {
	// If the following call pancis, it indicates UnimplementedDb_DTakoEventsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Db_DTakoEventsService_ServiceDesc, srv)
}

func _Db_DTakoEventsService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Db_GetDTakoEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Db_DTakoEventsServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Db_DTakoEventsService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Db_DTakoEventsServiceServer).Get(ctx, req.(*Db_GetDTakoEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Db_DTakoEventsService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Db_ListDTakoEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Db_DTakoEventsServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Db_DTakoEventsService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Db_DTakoEventsServiceServer).List(ctx, req.(*Db_ListDTakoEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Db_DTakoEventsService_GetByOperationNo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Db_GetDTakoEventsByOperationNoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Db_DTakoEventsServiceServer).GetByOperationNo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Db_DTakoEventsService_GetByOperationNo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Db_DTakoEventsServiceServer).GetByOperationNo(ctx, req.(*Db_GetDTakoEventsByOperationNoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Db_DTakoEventsService_ServiceDesc is the grpc.ServiceDesc for Db_DTakoEventsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Db_DTakoEventsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "db_service.db_DTakoEventsService",
	HandlerType: (*Db_DTakoEventsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Db_DTakoEventsService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Db_DTakoEventsService_List_Handler,
		},
		{
			MethodName: "GetByOperationNo",
			Handler:    _Db_DTakoEventsService_GetByOperationNo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "db_service.proto",
}

const (
	Db_DTakoRowsService_Get_FullMethodName              = "/db_service.db_DTakoRowsService/Get"
	Db_DTakoRowsService_List_FullMethodName             = "/db_service.db_DTakoRowsService/List"
	Db_DTakoRowsService_GetByOperationNo_FullMethodName = "/db_service.db_DTakoRowsService/GetByOperationNo"
)

// Db_DTakoRowsServiceClient is the client API for Db_DTakoRowsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// DTakoRowsサービス - 運行データ管理（本番DB、読み取り専用）
type Db_DTakoRowsServiceClient interface {
	// 運行データ取得
	Get(ctx context.Context, in *Db_GetDTakoRowsRequest, opts ...grpc.CallOption) (*Db_DTakoRowsResponse, error)
	// 運行データ一覧取得
	List(ctx context.Context, in *Db_ListDTakoRowsRequest, opts ...grpc.CallOption) (*Db_ListDTakoRowsResponse, error)
	// 運行NOで運行データ取得
	GetByOperationNo(ctx context.Context, in *Db_GetDTakoRowsByOperationNoRequest, opts ...grpc.CallOption) (*Db_ListDTakoRowsResponse, error)
}

type db_DTakoRowsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDb_DTakoRowsServiceClient(cc grpc.ClientConnInterface) Db_DTakoRowsServiceClient {
	return &db_DTakoRowsServiceClient{cc}
}

func (c *db_DTakoRowsServiceClient) Get(ctx context.Context, in *Db_GetDTakoRowsRequest, opts ...grpc.CallOption) (*Db_DTakoRowsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Db_DTakoRowsResponse)
	err := c.cc.Invoke(ctx, Db_DTakoRowsService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *db_DTakoRowsServiceClient) List(ctx context.Context, in *Db_ListDTakoRowsRequest, opts ...grpc.CallOption) (*Db_ListDTakoRowsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Db_ListDTakoRowsResponse)
	err := c.cc.Invoke(ctx, Db_DTakoRowsService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *db_DTakoRowsServiceClient) GetByOperationNo(ctx context.Context, in *Db_GetDTakoRowsByOperationNoRequest, opts ...grpc.CallOption) (*Db_ListDTakoRowsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Db_ListDTakoRowsResponse)
	err := c.cc.Invoke(ctx, Db_DTakoRowsService_GetByOperationNo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Db_DTakoRowsServiceServer is the server API for Db_DTakoRowsService service.
// All implementations should embed UnimplementedDb_DTakoRowsServiceServer
// for forward compatibility.
//
// DTakoRowsサービス - 運行データ管理（本番DB、読み取り専用）
type Db_DTakoRowsServiceServer interface {
	// 運行データ取得
	Get(context.Context, *Db_GetDTakoRowsRequest) (*Db_DTakoRowsResponse, error)
	// 運行データ一覧取得
	List(context.Context, *Db_ListDTakoRowsRequest) (*Db_ListDTakoRowsResponse, error)
	// 運行NOで運行データ取得
	GetByOperationNo(context.Context, *Db_GetDTakoRowsByOperationNoRequest) (*Db_ListDTakoRowsResponse, error)
}

// UnimplementedDb_DTakoRowsServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDb_DTakoRowsServiceServer struct{}

func (UnimplementedDb_DTakoRowsServiceServer) Get(context.Context, *Db_GetDTakoRowsRequest) (*Db_DTakoRowsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedDb_DTakoRowsServiceServer) List(context.Context, *Db_ListDTakoRowsRequest) (*Db_ListDTakoRowsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedDb_DTakoRowsServiceServer) GetByOperationNo(context.Context, *Db_GetDTakoRowsByOperationNoRequest) (*Db_ListDTakoRowsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByOperationNo not implemented")
}
func (UnimplementedDb_DTakoRowsServiceServer) testEmbeddedByValue() {}

// UnsafeDb_DTakoRowsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Db_DTakoRowsServiceServer will
// result in compilation errors.
type UnsafeDb_DTakoRowsServiceServer interface {
	mustEmbedUnimplementedDb_DTakoRowsServiceServer()
}

func RegisterDb_DTakoRowsServiceServer(s grpc.ServiceRegistrar, srv Db_DTakoRowsServiceServer) {
	// If the following call pancis, it indicates UnimplementedDb_DTakoRowsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Db_DTakoRowsService_ServiceDesc, srv)
}

func _Db_DTakoRowsService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Db_GetDTakoRowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Db_DTakoRowsServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Db_DTakoRowsService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Db_DTakoRowsServiceServer).Get(ctx, req.(*Db_GetDTakoRowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Db_DTakoRowsService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Db_ListDTakoRowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Db_DTakoRowsServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Db_DTakoRowsService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Db_DTakoRowsServiceServer).List(ctx, req.(*Db_ListDTakoRowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Db_DTakoRowsService_GetByOperationNo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Db_GetDTakoRowsByOperationNoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Db_DTakoRowsServiceServer).GetByOperationNo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Db_DTakoRowsService_GetByOperationNo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Db_DTakoRowsServiceServer).GetByOperationNo(ctx, req.(*Db_GetDTakoRowsByOperationNoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Db_DTakoRowsService_ServiceDesc is the grpc.ServiceDesc for Db_DTakoRowsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Db_DTakoRowsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "db_service.db_DTakoRowsService",
	HandlerType: (*Db_DTakoRowsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Db_DTakoRowsService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Db_DTakoRowsService_List_Handler,
		},
		{
			MethodName: "GetByOperationNo",
			Handler:    _Db_DTakoRowsService_GetByOperationNo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "db_service.proto",
}

const (
	Db_ETCNumService_List_FullMethodName            = "/db_service.db_ETCNumService/List"
	Db_ETCNumService_GetByETCCardNum_FullMethodName = "/db_service.db_ETCNumService/GetByETCCardNum"
	Db_ETCNumService_GetByCarID_FullMethodName      = "/db_service.db_ETCNumService/GetByCarID"
)

// Db_ETCNumServiceClient is the client API for Db_ETCNumService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ETCNumサービス - ETCカード番号マスタ管理（本番DB、読み取り専用）
type Db_ETCNumServiceClient interface {
	// ETCカード番号一覧取得
	List(ctx context.Context, in *Db_ListETCNumRequest, opts ...grpc.CallOption) (*Db_ListETCNumResponse, error)
	// ETCカード番号で取得
	GetByETCCardNum(ctx context.Context, in *Db_GetETCNumByETCCardNumRequest, opts ...grpc.CallOption) (*Db_ListETCNumResponse, error)
	// 車輌IDで取得
	GetByCarID(ctx context.Context, in *Db_GetETCNumByCarIDRequest, opts ...grpc.CallOption) (*Db_ListETCNumResponse, error)
}

type db_ETCNumServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDb_ETCNumServiceClient(cc grpc.ClientConnInterface) Db_ETCNumServiceClient {
	return &db_ETCNumServiceClient{cc}
}

func (c *db_ETCNumServiceClient) List(ctx context.Context, in *Db_ListETCNumRequest, opts ...grpc.CallOption) (*Db_ListETCNumResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Db_ListETCNumResponse)
	err := c.cc.Invoke(ctx, Db_ETCNumService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *db_ETCNumServiceClient) GetByETCCardNum(ctx context.Context, in *Db_GetETCNumByETCCardNumRequest, opts ...grpc.CallOption) (*Db_ListETCNumResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Db_ListETCNumResponse)
	err := c.cc.Invoke(ctx, Db_ETCNumService_GetByETCCardNum_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *db_ETCNumServiceClient) GetByCarID(ctx context.Context, in *Db_GetETCNumByCarIDRequest, opts ...grpc.CallOption) (*Db_ListETCNumResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Db_ListETCNumResponse)
	err := c.cc.Invoke(ctx, Db_ETCNumService_GetByCarID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Db_ETCNumServiceServer is the server API for Db_ETCNumService service.
// All implementations should embed UnimplementedDb_ETCNumServiceServer
// for forward compatibility.
//
// ETCNumサービス - ETCカード番号マスタ管理（本番DB、読み取り専用）
type Db_ETCNumServiceServer interface {
	// ETCカード番号一覧取得
	List(context.Context, *Db_ListETCNumRequest) (*Db_ListETCNumResponse, error)
	// ETCカード番号で取得
	GetByETCCardNum(context.Context, *Db_GetETCNumByETCCardNumRequest) (*Db_ListETCNumResponse, error)
	// 車輌IDで取得
	GetByCarID(context.Context, *Db_GetETCNumByCarIDRequest) (*Db_ListETCNumResponse, error)
}

// UnimplementedDb_ETCNumServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDb_ETCNumServiceServer struct{}

func (UnimplementedDb_ETCNumServiceServer) List(context.Context, *Db_ListETCNumRequest) (*Db_ListETCNumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedDb_ETCNumServiceServer) GetByETCCardNum(context.Context, *Db_GetETCNumByETCCardNumRequest) (*Db_ListETCNumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByETCCardNum not implemented")
}
func (UnimplementedDb_ETCNumServiceServer) GetByCarID(context.Context, *Db_GetETCNumByCarIDRequest) (*Db_ListETCNumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByCarID not implemented")
}
func (UnimplementedDb_ETCNumServiceServer) testEmbeddedByValue() {}

// UnsafeDb_ETCNumServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Db_ETCNumServiceServer will
// result in compilation errors.
type UnsafeDb_ETCNumServiceServer interface {
	mustEmbedUnimplementedDb_ETCNumServiceServer()
}

func RegisterDb_ETCNumServiceServer(s grpc.ServiceRegistrar, srv Db_ETCNumServiceServer) {
	// If the following call pancis, it indicates UnimplementedDb_ETCNumServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Db_ETCNumService_ServiceDesc, srv)
}

func _Db_ETCNumService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Db_ListETCNumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Db_ETCNumServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Db_ETCNumService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Db_ETCNumServiceServer).List(ctx, req.(*Db_ListETCNumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Db_ETCNumService_GetByETCCardNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Db_GetETCNumByETCCardNumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Db_ETCNumServiceServer).GetByETCCardNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Db_ETCNumService_GetByETCCardNum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Db_ETCNumServiceServer).GetByETCCardNum(ctx, req.(*Db_GetETCNumByETCCardNumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Db_ETCNumService_GetByCarID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Db_GetETCNumByCarIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Db_ETCNumServiceServer).GetByCarID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Db_ETCNumService_GetByCarID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Db_ETCNumServiceServer).GetByCarID(ctx, req.(*Db_GetETCNumByCarIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Db_ETCNumService_ServiceDesc is the grpc.ServiceDesc for Db_ETCNumService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Db_ETCNumService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "db_service.db_ETCNumService",
	HandlerType: (*Db_ETCNumServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _Db_ETCNumService_List_Handler,
		},
		{
			MethodName: "GetByETCCardNum",
			Handler:    _Db_ETCNumService_GetByETCCardNum_Handler,
		},
		{
			MethodName: "GetByCarID",
			Handler:    _Db_ETCNumService_GetByCarID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "db_service.proto",
}

const (
	Db_DTakoFerryRowsProdService_Get_FullMethodName         = "/db_service.db_DTakoFerryRowsProdService/Get"
	Db_DTakoFerryRowsProdService_List_FullMethodName        = "/db_service.db_DTakoFerryRowsProdService/List"
	Db_DTakoFerryRowsProdService_GetByUnkoNo_FullMethodName = "/db_service.db_DTakoFerryRowsProdService/GetByUnkoNo"
)

// Db_DTakoFerryRowsProdServiceClient is the client API for Db_DTakoFerryRowsProdService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// DTakoFerryRowsProdサービス - フェリー運行データ管理（本番DB、読み取り専用）
type Db_DTakoFerryRowsProdServiceClient interface {
	// フェリー運行データ取得
	Get(ctx context.Context, in *Db_GetDTakoFerryRowsProdRequest, opts ...grpc.CallOption) (*Db_DTakoFerryRowsProdResponse, error)
	// フェリー運行データ一覧取得
	List(ctx context.Context, in *Db_ListDTakoFerryRowsProdRequest, opts ...grpc.CallOption) (*Db_ListDTakoFerryRowsProdResponse, error)
	// 運行NOでフェリー運行データ取得
	GetByUnkoNo(ctx context.Context, in *Db_GetDTakoFerryRowsProdByUnkoNoRequest, opts ...grpc.CallOption) (*Db_ListDTakoFerryRowsProdResponse, error)
}

type db_DTakoFerryRowsProdServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDb_DTakoFerryRowsProdServiceClient(cc grpc.ClientConnInterface) Db_DTakoFerryRowsProdServiceClient {
	return &db_DTakoFerryRowsProdServiceClient{cc}
}

func (c *db_DTakoFerryRowsProdServiceClient) Get(ctx context.Context, in *Db_GetDTakoFerryRowsProdRequest, opts ...grpc.CallOption) (*Db_DTakoFerryRowsProdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Db_DTakoFerryRowsProdResponse)
	err := c.cc.Invoke(ctx, Db_DTakoFerryRowsProdService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *db_DTakoFerryRowsProdServiceClient) List(ctx context.Context, in *Db_ListDTakoFerryRowsProdRequest, opts ...grpc.CallOption) (*Db_ListDTakoFerryRowsProdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Db_ListDTakoFerryRowsProdResponse)
	err := c.cc.Invoke(ctx, Db_DTakoFerryRowsProdService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *db_DTakoFerryRowsProdServiceClient) GetByUnkoNo(ctx context.Context, in *Db_GetDTakoFerryRowsProdByUnkoNoRequest, opts ...grpc.CallOption) (*Db_ListDTakoFerryRowsProdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Db_ListDTakoFerryRowsProdResponse)
	err := c.cc.Invoke(ctx, Db_DTakoFerryRowsProdService_GetByUnkoNo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Db_DTakoFerryRowsProdServiceServer is the server API for Db_DTakoFerryRowsProdService service.
// All implementations should embed UnimplementedDb_DTakoFerryRowsProdServiceServer
// for forward compatibility.
//
// DTakoFerryRowsProdサービス - フェリー運行データ管理（本番DB、読み取り専用）
type Db_DTakoFerryRowsProdServiceServer interface {
	// フェリー運行データ取得
	Get(context.Context, *Db_GetDTakoFerryRowsProdRequest) (*Db_DTakoFerryRowsProdResponse, error)
	// フェリー運行データ一覧取得
	List(context.Context, *Db_ListDTakoFerryRowsProdRequest) (*Db_ListDTakoFerryRowsProdResponse, error)
	// 運行NOでフェリー運行データ取得
	GetByUnkoNo(context.Context, *Db_GetDTakoFerryRowsProdByUnkoNoRequest) (*Db_ListDTakoFerryRowsProdResponse, error)
}

// UnimplementedDb_DTakoFerryRowsProdServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDb_DTakoFerryRowsProdServiceServer struct{}

func (UnimplementedDb_DTakoFerryRowsProdServiceServer) Get(context.Context, *Db_GetDTakoFerryRowsProdRequest) (*Db_DTakoFerryRowsProdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedDb_DTakoFerryRowsProdServiceServer) List(context.Context, *Db_ListDTakoFerryRowsProdRequest) (*Db_ListDTakoFerryRowsProdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedDb_DTakoFerryRowsProdServiceServer) GetByUnkoNo(context.Context, *Db_GetDTakoFerryRowsProdByUnkoNoRequest) (*Db_ListDTakoFerryRowsProdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByUnkoNo not implemented")
}
func (UnimplementedDb_DTakoFerryRowsProdServiceServer) testEmbeddedByValue() {}

// UnsafeDb_DTakoFerryRowsProdServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Db_DTakoFerryRowsProdServiceServer will
// result in compilation errors.
type UnsafeDb_DTakoFerryRowsProdServiceServer interface {
	mustEmbedUnimplementedDb_DTakoFerryRowsProdServiceServer()
}

func RegisterDb_DTakoFerryRowsProdServiceServer(s grpc.ServiceRegistrar, srv Db_DTakoFerryRowsProdServiceServer) {
	// If the following call pancis, it indicates UnimplementedDb_DTakoFerryRowsProdServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Db_DTakoFerryRowsProdService_ServiceDesc, srv)
}

func _Db_DTakoFerryRowsProdService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Db_GetDTakoFerryRowsProdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Db_DTakoFerryRowsProdServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Db_DTakoFerryRowsProdService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Db_DTakoFerryRowsProdServiceServer).Get(ctx, req.(*Db_GetDTakoFerryRowsProdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Db_DTakoFerryRowsProdService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Db_ListDTakoFerryRowsProdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Db_DTakoFerryRowsProdServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Db_DTakoFerryRowsProdService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Db_DTakoFerryRowsProdServiceServer).List(ctx, req.(*Db_ListDTakoFerryRowsProdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Db_DTakoFerryRowsProdService_GetByUnkoNo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Db_GetDTakoFerryRowsProdByUnkoNoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Db_DTakoFerryRowsProdServiceServer).GetByUnkoNo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Db_DTakoFerryRowsProdService_GetByUnkoNo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Db_DTakoFerryRowsProdServiceServer).GetByUnkoNo(ctx, req.(*Db_GetDTakoFerryRowsProdByUnkoNoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Db_DTakoFerryRowsProdService_ServiceDesc is the grpc.ServiceDesc for Db_DTakoFerryRowsProdService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Db_DTakoFerryRowsProdService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "db_service.db_DTakoFerryRowsProdService",
	HandlerType: (*Db_DTakoFerryRowsProdServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Db_DTakoFerryRowsProdService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Db_DTakoFerryRowsProdService_List_Handler,
		},
		{
			MethodName: "GetByUnkoNo",
			Handler:    _Db_DTakoFerryRowsProdService_GetByUnkoNo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "db_service.proto",
}

const (
	Db_CarsService_Get_FullMethodName              = "/db_service.db_CarsService/Get"
	Db_CarsService_List_FullMethodName             = "/db_service.db_CarsService/List"
	Db_CarsService_GetByBumonCodeID_FullMethodName = "/db_service.db_CarsService/GetByBumonCodeID"
)

// Db_CarsServiceClient is the client API for Db_CarsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// CarsService - 車両マスタ管理（本番DB、読み取り専用）
type Db_CarsServiceClient interface {
	// 車両情報取得
	Get(ctx context.Context, in *Db_GetCarsRequest, opts ...grpc.CallOption) (*Db_CarsResponse, error)
	// 車両情報一覧取得
	List(ctx context.Context, in *Db_ListCarsRequest, opts ...grpc.CallOption) (*Db_ListCarsResponse, error)
	// 部門コードで車両情報取得
	GetByBumonCodeID(ctx context.Context, in *Db_GetCarsByBumonCodeIDRequest, opts ...grpc.CallOption) (*Db_ListCarsResponse, error)
}

type db_CarsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDb_CarsServiceClient(cc grpc.ClientConnInterface) Db_CarsServiceClient {
	return &db_CarsServiceClient{cc}
}

func (c *db_CarsServiceClient) Get(ctx context.Context, in *Db_GetCarsRequest, opts ...grpc.CallOption) (*Db_CarsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Db_CarsResponse)
	err := c.cc.Invoke(ctx, Db_CarsService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *db_CarsServiceClient) List(ctx context.Context, in *Db_ListCarsRequest, opts ...grpc.CallOption) (*Db_ListCarsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Db_ListCarsResponse)
	err := c.cc.Invoke(ctx, Db_CarsService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *db_CarsServiceClient) GetByBumonCodeID(ctx context.Context, in *Db_GetCarsByBumonCodeIDRequest, opts ...grpc.CallOption) (*Db_ListCarsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Db_ListCarsResponse)
	err := c.cc.Invoke(ctx, Db_CarsService_GetByBumonCodeID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Db_CarsServiceServer is the server API for Db_CarsService service.
// All implementations should embed UnimplementedDb_CarsServiceServer
// for forward compatibility.
//
// CarsService - 車両マスタ管理（本番DB、読み取り専用）
type Db_CarsServiceServer interface {
	// 車両情報取得
	Get(context.Context, *Db_GetCarsRequest) (*Db_CarsResponse, error)
	// 車両情報一覧取得
	List(context.Context, *Db_ListCarsRequest) (*Db_ListCarsResponse, error)
	// 部門コードで車両情報取得
	GetByBumonCodeID(context.Context, *Db_GetCarsByBumonCodeIDRequest) (*Db_ListCarsResponse, error)
}

// UnimplementedDb_CarsServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDb_CarsServiceServer struct{}

func (UnimplementedDb_CarsServiceServer) Get(context.Context, *Db_GetCarsRequest) (*Db_CarsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedDb_CarsServiceServer) List(context.Context, *Db_ListCarsRequest) (*Db_ListCarsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedDb_CarsServiceServer) GetByBumonCodeID(context.Context, *Db_GetCarsByBumonCodeIDRequest) (*Db_ListCarsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByBumonCodeID not implemented")
}
func (UnimplementedDb_CarsServiceServer) testEmbeddedByValue() {}

// UnsafeDb_CarsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Db_CarsServiceServer will
// result in compilation errors.
type UnsafeDb_CarsServiceServer interface {
	mustEmbedUnimplementedDb_CarsServiceServer()
}

func RegisterDb_CarsServiceServer(s grpc.ServiceRegistrar, srv Db_CarsServiceServer) {
	// If the following call pancis, it indicates UnimplementedDb_CarsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Db_CarsService_ServiceDesc, srv)
}

func _Db_CarsService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Db_GetCarsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Db_CarsServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Db_CarsService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Db_CarsServiceServer).Get(ctx, req.(*Db_GetCarsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Db_CarsService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Db_ListCarsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Db_CarsServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Db_CarsService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Db_CarsServiceServer).List(ctx, req.(*Db_ListCarsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Db_CarsService_GetByBumonCodeID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Db_GetCarsByBumonCodeIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Db_CarsServiceServer).GetByBumonCodeID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Db_CarsService_GetByBumonCodeID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Db_CarsServiceServer).GetByBumonCodeID(ctx, req.(*Db_GetCarsByBumonCodeIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Db_CarsService_ServiceDesc is the grpc.ServiceDesc for Db_CarsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Db_CarsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "db_service.db_CarsService",
	HandlerType: (*Db_CarsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Db_CarsService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Db_CarsService_List_Handler,
		},
		{
			MethodName: "GetByBumonCodeID",
			Handler:    _Db_CarsService_GetByBumonCodeID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "db_service.proto",
}

const (
	Db_DriversService_Get_FullMethodName        = "/db_service.db_DriversService/Get"
	Db_DriversService_List_FullMethodName       = "/db_service.db_DriversService/List"
	Db_DriversService_GetByBumon_FullMethodName = "/db_service.db_DriversService/GetByBumon"
)

// Db_DriversServiceClient is the client API for Db_DriversService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// DriversService - ドライバーマスタ管理（本番DB、読み取り専用）
type Db_DriversServiceClient interface {
	// ドライバー情報取得
	Get(ctx context.Context, in *Db_GetDriversRequest, opts ...grpc.CallOption) (*Db_DriversResponse, error)
	// ドライバー情報一覧取得
	List(ctx context.Context, in *Db_ListDriversRequest, opts ...grpc.CallOption) (*Db_ListDriversResponse, error)
	// 部門コードでドライバー情報取得
	GetByBumon(ctx context.Context, in *Db_GetDriversByBumonRequest, opts ...grpc.CallOption) (*Db_ListDriversResponse, error)
}

type db_DriversServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDb_DriversServiceClient(cc grpc.ClientConnInterface) Db_DriversServiceClient {
	return &db_DriversServiceClient{cc}
}

func (c *db_DriversServiceClient) Get(ctx context.Context, in *Db_GetDriversRequest, opts ...grpc.CallOption) (*Db_DriversResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Db_DriversResponse)
	err := c.cc.Invoke(ctx, Db_DriversService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *db_DriversServiceClient) List(ctx context.Context, in *Db_ListDriversRequest, opts ...grpc.CallOption) (*Db_ListDriversResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Db_ListDriversResponse)
	err := c.cc.Invoke(ctx, Db_DriversService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *db_DriversServiceClient) GetByBumon(ctx context.Context, in *Db_GetDriversByBumonRequest, opts ...grpc.CallOption) (*Db_ListDriversResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Db_ListDriversResponse)
	err := c.cc.Invoke(ctx, Db_DriversService_GetByBumon_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Db_DriversServiceServer is the server API for Db_DriversService service.
// All implementations should embed UnimplementedDb_DriversServiceServer
// for forward compatibility.
//
// DriversService - ドライバーマスタ管理（本番DB、読み取り専用）
type Db_DriversServiceServer interface {
	// ドライバー情報取得
	Get(context.Context, *Db_GetDriversRequest) (*Db_DriversResponse, error)
	// ドライバー情報一覧取得
	List(context.Context, *Db_ListDriversRequest) (*Db_ListDriversResponse, error)
	// 部門コードでドライバー情報取得
	GetByBumon(context.Context, *Db_GetDriversByBumonRequest) (*Db_ListDriversResponse, error)
}

// UnimplementedDb_DriversServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDb_DriversServiceServer struct{}

func (UnimplementedDb_DriversServiceServer) Get(context.Context, *Db_GetDriversRequest) (*Db_DriversResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedDb_DriversServiceServer) List(context.Context, *Db_ListDriversRequest) (*Db_ListDriversResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedDb_DriversServiceServer) GetByBumon(context.Context, *Db_GetDriversByBumonRequest) (*Db_ListDriversResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByBumon not implemented")
}
func (UnimplementedDb_DriversServiceServer) testEmbeddedByValue() {}

// UnsafeDb_DriversServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Db_DriversServiceServer will
// result in compilation errors.
type UnsafeDb_DriversServiceServer interface {
	mustEmbedUnimplementedDb_DriversServiceServer()
}

func RegisterDb_DriversServiceServer(s grpc.ServiceRegistrar, srv Db_DriversServiceServer) {
	// If the following call pancis, it indicates UnimplementedDb_DriversServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Db_DriversService_ServiceDesc, srv)
}

func _Db_DriversService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Db_GetDriversRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Db_DriversServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Db_DriversService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Db_DriversServiceServer).Get(ctx, req.(*Db_GetDriversRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Db_DriversService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Db_ListDriversRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Db_DriversServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Db_DriversService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Db_DriversServiceServer).List(ctx, req.(*Db_ListDriversRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Db_DriversService_GetByBumon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Db_GetDriversByBumonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Db_DriversServiceServer).GetByBumon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Db_DriversService_GetByBumon_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Db_DriversServiceServer).GetByBumon(ctx, req.(*Db_GetDriversByBumonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Db_DriversService_ServiceDesc is the grpc.ServiceDesc for Db_DriversService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Db_DriversService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "db_service.db_DriversService",
	HandlerType: (*Db_DriversServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Db_DriversService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Db_DriversService_List_Handler,
		},
		{
			MethodName: "GetByBumon",
			Handler:    _Db_DriversService_GetByBumon_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "db_service.proto",
}

const (
	Db_UntenNippoMeisaiService_Get_FullMethodName            = "/db_service.db_UntenNippoMeisaiService/Get"
	Db_UntenNippoMeisaiService_List_FullMethodName           = "/db_service.db_UntenNippoMeisaiService/List"
	Db_UntenNippoMeisaiService_GetBySharyoC_FullMethodName   = "/db_service.db_UntenNippoMeisaiService/GetBySharyoC"
	Db_UntenNippoMeisaiService_GetByDateRange_FullMethodName = "/db_service.db_UntenNippoMeisaiService/GetByDateRange"
)

// Db_UntenNippoMeisaiServiceClient is the client API for Db_UntenNippoMeisaiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// UntenNippoMeisaiService - 運転日報明細管理（SQL Server、読み取り専用）
type Db_UntenNippoMeisaiServiceClient interface {
	Get(ctx context.Context, in *Db_GetUntenNippoMeisaiRequest, opts ...grpc.CallOption) (*Db_UntenNippoMeisaiResponse, error)
	List(ctx context.Context, in *Db_ListUntenNippoMeisaiRequest, opts ...grpc.CallOption) (*Db_ListUntenNippoMeisaiResponse, error)
	GetBySharyoC(ctx context.Context, in *Db_GetUntenNippoMeisaiBySharyoCRequest, opts ...grpc.CallOption) (*Db_ListUntenNippoMeisaiResponse, error)
	GetByDateRange(ctx context.Context, in *Db_GetUntenNippoMeisaiByDateRangeRequest, opts ...grpc.CallOption) (*Db_ListUntenNippoMeisaiResponse, error)
}

type db_UntenNippoMeisaiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDb_UntenNippoMeisaiServiceClient(cc grpc.ClientConnInterface) Db_UntenNippoMeisaiServiceClient {
	return &db_UntenNippoMeisaiServiceClient{cc}
}

func (c *db_UntenNippoMeisaiServiceClient) Get(ctx context.Context, in *Db_GetUntenNippoMeisaiRequest, opts ...grpc.CallOption) (*Db_UntenNippoMeisaiResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Db_UntenNippoMeisaiResponse)
	err := c.cc.Invoke(ctx, Db_UntenNippoMeisaiService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *db_UntenNippoMeisaiServiceClient) List(ctx context.Context, in *Db_ListUntenNippoMeisaiRequest, opts ...grpc.CallOption) (*Db_ListUntenNippoMeisaiResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Db_ListUntenNippoMeisaiResponse)
	err := c.cc.Invoke(ctx, Db_UntenNippoMeisaiService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *db_UntenNippoMeisaiServiceClient) GetBySharyoC(ctx context.Context, in *Db_GetUntenNippoMeisaiBySharyoCRequest, opts ...grpc.CallOption) (*Db_ListUntenNippoMeisaiResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Db_ListUntenNippoMeisaiResponse)
	err := c.cc.Invoke(ctx, Db_UntenNippoMeisaiService_GetBySharyoC_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *db_UntenNippoMeisaiServiceClient) GetByDateRange(ctx context.Context, in *Db_GetUntenNippoMeisaiByDateRangeRequest, opts ...grpc.CallOption) (*Db_ListUntenNippoMeisaiResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Db_ListUntenNippoMeisaiResponse)
	err := c.cc.Invoke(ctx, Db_UntenNippoMeisaiService_GetByDateRange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Db_UntenNippoMeisaiServiceServer is the server API for Db_UntenNippoMeisaiService service.
// All implementations should embed UnimplementedDb_UntenNippoMeisaiServiceServer
// for forward compatibility.
//
// UntenNippoMeisaiService - 運転日報明細管理（SQL Server、読み取り専用）
type Db_UntenNippoMeisaiServiceServer interface {
	Get(context.Context, *Db_GetUntenNippoMeisaiRequest) (*Db_UntenNippoMeisaiResponse, error)
	List(context.Context, *Db_ListUntenNippoMeisaiRequest) (*Db_ListUntenNippoMeisaiResponse, error)
	GetBySharyoC(context.Context, *Db_GetUntenNippoMeisaiBySharyoCRequest) (*Db_ListUntenNippoMeisaiResponse, error)
	GetByDateRange(context.Context, *Db_GetUntenNippoMeisaiByDateRangeRequest) (*Db_ListUntenNippoMeisaiResponse, error)
}

// UnimplementedDb_UntenNippoMeisaiServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDb_UntenNippoMeisaiServiceServer struct{}

func (UnimplementedDb_UntenNippoMeisaiServiceServer) Get(context.Context, *Db_GetUntenNippoMeisaiRequest) (*Db_UntenNippoMeisaiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedDb_UntenNippoMeisaiServiceServer) List(context.Context, *Db_ListUntenNippoMeisaiRequest) (*Db_ListUntenNippoMeisaiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedDb_UntenNippoMeisaiServiceServer) GetBySharyoC(context.Context, *Db_GetUntenNippoMeisaiBySharyoCRequest) (*Db_ListUntenNippoMeisaiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBySharyoC not implemented")
}
func (UnimplementedDb_UntenNippoMeisaiServiceServer) GetByDateRange(context.Context, *Db_GetUntenNippoMeisaiByDateRangeRequest) (*Db_ListUntenNippoMeisaiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByDateRange not implemented")
}
func (UnimplementedDb_UntenNippoMeisaiServiceServer) testEmbeddedByValue() {}

// UnsafeDb_UntenNippoMeisaiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Db_UntenNippoMeisaiServiceServer will
// result in compilation errors.
type UnsafeDb_UntenNippoMeisaiServiceServer interface {
	mustEmbedUnimplementedDb_UntenNippoMeisaiServiceServer()
}

func RegisterDb_UntenNippoMeisaiServiceServer(s grpc.ServiceRegistrar, srv Db_UntenNippoMeisaiServiceServer) {
	// If the following call pancis, it indicates UnimplementedDb_UntenNippoMeisaiServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Db_UntenNippoMeisaiService_ServiceDesc, srv)
}

func _Db_UntenNippoMeisaiService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Db_GetUntenNippoMeisaiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Db_UntenNippoMeisaiServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Db_UntenNippoMeisaiService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Db_UntenNippoMeisaiServiceServer).Get(ctx, req.(*Db_GetUntenNippoMeisaiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Db_UntenNippoMeisaiService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Db_ListUntenNippoMeisaiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Db_UntenNippoMeisaiServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Db_UntenNippoMeisaiService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Db_UntenNippoMeisaiServiceServer).List(ctx, req.(*Db_ListUntenNippoMeisaiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Db_UntenNippoMeisaiService_GetBySharyoC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Db_GetUntenNippoMeisaiBySharyoCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Db_UntenNippoMeisaiServiceServer).GetBySharyoC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Db_UntenNippoMeisaiService_GetBySharyoC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Db_UntenNippoMeisaiServiceServer).GetBySharyoC(ctx, req.(*Db_GetUntenNippoMeisaiBySharyoCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Db_UntenNippoMeisaiService_GetByDateRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Db_GetUntenNippoMeisaiByDateRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Db_UntenNippoMeisaiServiceServer).GetByDateRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Db_UntenNippoMeisaiService_GetByDateRange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Db_UntenNippoMeisaiServiceServer).GetByDateRange(ctx, req.(*Db_GetUntenNippoMeisaiByDateRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Db_UntenNippoMeisaiService_ServiceDesc is the grpc.ServiceDesc for Db_UntenNippoMeisaiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Db_UntenNippoMeisaiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "db_service.db_UntenNippoMeisaiService",
	HandlerType: (*Db_UntenNippoMeisaiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Db_UntenNippoMeisaiService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Db_UntenNippoMeisaiService_List_Handler,
		},
		{
			MethodName: "GetBySharyoC",
			Handler:    _Db_UntenNippoMeisaiService_GetBySharyoC_Handler,
		},
		{
			MethodName: "GetByDateRange",
			Handler:    _Db_UntenNippoMeisaiService_GetByDateRange_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "db_service.proto",
}

const (
	Db_ShainMasterService_Get_FullMethodName         = "/db_service.db_ShainMasterService/Get"
	Db_ShainMasterService_List_FullMethodName        = "/db_service.db_ShainMasterService/List"
	Db_ShainMasterService_GetByBumonC_FullMethodName = "/db_service.db_ShainMasterService/GetByBumonC"
)

// Db_ShainMasterServiceClient is the client API for Db_ShainMasterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ShainMasterService - 社員マスタ管理（SQL Server、読み取り専用）
type Db_ShainMasterServiceClient interface {
	Get(ctx context.Context, in *Db_GetShainMasterRequest, opts ...grpc.CallOption) (*Db_ShainMasterResponse, error)
	List(ctx context.Context, in *Db_ListShainMasterRequest, opts ...grpc.CallOption) (*Db_ListShainMasterResponse, error)
	GetByBumonC(ctx context.Context, in *Db_GetShainMasterByBumonCRequest, opts ...grpc.CallOption) (*Db_ListShainMasterResponse, error)
}

type db_ShainMasterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDb_ShainMasterServiceClient(cc grpc.ClientConnInterface) Db_ShainMasterServiceClient {
	return &db_ShainMasterServiceClient{cc}
}

func (c *db_ShainMasterServiceClient) Get(ctx context.Context, in *Db_GetShainMasterRequest, opts ...grpc.CallOption) (*Db_ShainMasterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Db_ShainMasterResponse)
	err := c.cc.Invoke(ctx, Db_ShainMasterService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *db_ShainMasterServiceClient) List(ctx context.Context, in *Db_ListShainMasterRequest, opts ...grpc.CallOption) (*Db_ListShainMasterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Db_ListShainMasterResponse)
	err := c.cc.Invoke(ctx, Db_ShainMasterService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *db_ShainMasterServiceClient) GetByBumonC(ctx context.Context, in *Db_GetShainMasterByBumonCRequest, opts ...grpc.CallOption) (*Db_ListShainMasterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Db_ListShainMasterResponse)
	err := c.cc.Invoke(ctx, Db_ShainMasterService_GetByBumonC_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Db_ShainMasterServiceServer is the server API for Db_ShainMasterService service.
// All implementations should embed UnimplementedDb_ShainMasterServiceServer
// for forward compatibility.
//
// ShainMasterService - 社員マスタ管理（SQL Server、読み取り専用）
type Db_ShainMasterServiceServer interface {
	Get(context.Context, *Db_GetShainMasterRequest) (*Db_ShainMasterResponse, error)
	List(context.Context, *Db_ListShainMasterRequest) (*Db_ListShainMasterResponse, error)
	GetByBumonC(context.Context, *Db_GetShainMasterByBumonCRequest) (*Db_ListShainMasterResponse, error)
}

// UnimplementedDb_ShainMasterServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDb_ShainMasterServiceServer struct{}

func (UnimplementedDb_ShainMasterServiceServer) Get(context.Context, *Db_GetShainMasterRequest) (*Db_ShainMasterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedDb_ShainMasterServiceServer) List(context.Context, *Db_ListShainMasterRequest) (*Db_ListShainMasterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedDb_ShainMasterServiceServer) GetByBumonC(context.Context, *Db_GetShainMasterByBumonCRequest) (*Db_ListShainMasterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByBumonC not implemented")
}
func (UnimplementedDb_ShainMasterServiceServer) testEmbeddedByValue() {}

// UnsafeDb_ShainMasterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Db_ShainMasterServiceServer will
// result in compilation errors.
type UnsafeDb_ShainMasterServiceServer interface {
	mustEmbedUnimplementedDb_ShainMasterServiceServer()
}

func RegisterDb_ShainMasterServiceServer(s grpc.ServiceRegistrar, srv Db_ShainMasterServiceServer) {
	// If the following call pancis, it indicates UnimplementedDb_ShainMasterServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Db_ShainMasterService_ServiceDesc, srv)
}

func _Db_ShainMasterService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Db_GetShainMasterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Db_ShainMasterServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Db_ShainMasterService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Db_ShainMasterServiceServer).Get(ctx, req.(*Db_GetShainMasterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Db_ShainMasterService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Db_ListShainMasterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Db_ShainMasterServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Db_ShainMasterService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Db_ShainMasterServiceServer).List(ctx, req.(*Db_ListShainMasterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Db_ShainMasterService_GetByBumonC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Db_GetShainMasterByBumonCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Db_ShainMasterServiceServer).GetByBumonC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Db_ShainMasterService_GetByBumonC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Db_ShainMasterServiceServer).GetByBumonC(ctx, req.(*Db_GetShainMasterByBumonCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Db_ShainMasterService_ServiceDesc is the grpc.ServiceDesc for Db_ShainMasterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Db_ShainMasterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "db_service.db_ShainMasterService",
	HandlerType: (*Db_ShainMasterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Db_ShainMasterService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Db_ShainMasterService_List_Handler,
		},
		{
			MethodName: "GetByBumonC",
			Handler:    _Db_ShainMasterService_GetByBumonC_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "db_service.proto",
}

const (
	Db_ChiikiMasterService_Get_FullMethodName  = "/db_service.db_ChiikiMasterService/Get"
	Db_ChiikiMasterService_List_FullMethodName = "/db_service.db_ChiikiMasterService/List"
)

// Db_ChiikiMasterServiceClient is the client API for Db_ChiikiMasterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ChiikiMasterService - 地域マスタ管理（SQL Server、読み取り専用）
type Db_ChiikiMasterServiceClient interface {
	Get(ctx context.Context, in *Db_GetChiikiMasterRequest, opts ...grpc.CallOption) (*Db_ChiikiMasterResponse, error)
	List(ctx context.Context, in *Db_ListChiikiMasterRequest, opts ...grpc.CallOption) (*Db_ListChiikiMasterResponse, error)
}

type db_ChiikiMasterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDb_ChiikiMasterServiceClient(cc grpc.ClientConnInterface) Db_ChiikiMasterServiceClient {
	return &db_ChiikiMasterServiceClient{cc}
}

func (c *db_ChiikiMasterServiceClient) Get(ctx context.Context, in *Db_GetChiikiMasterRequest, opts ...grpc.CallOption) (*Db_ChiikiMasterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Db_ChiikiMasterResponse)
	err := c.cc.Invoke(ctx, Db_ChiikiMasterService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *db_ChiikiMasterServiceClient) List(ctx context.Context, in *Db_ListChiikiMasterRequest, opts ...grpc.CallOption) (*Db_ListChiikiMasterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Db_ListChiikiMasterResponse)
	err := c.cc.Invoke(ctx, Db_ChiikiMasterService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Db_ChiikiMasterServiceServer is the server API for Db_ChiikiMasterService service.
// All implementations should embed UnimplementedDb_ChiikiMasterServiceServer
// for forward compatibility.
//
// ChiikiMasterService - 地域マスタ管理（SQL Server、読み取り専用）
type Db_ChiikiMasterServiceServer interface {
	Get(context.Context, *Db_GetChiikiMasterRequest) (*Db_ChiikiMasterResponse, error)
	List(context.Context, *Db_ListChiikiMasterRequest) (*Db_ListChiikiMasterResponse, error)
}

// UnimplementedDb_ChiikiMasterServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDb_ChiikiMasterServiceServer struct{}

func (UnimplementedDb_ChiikiMasterServiceServer) Get(context.Context, *Db_GetChiikiMasterRequest) (*Db_ChiikiMasterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedDb_ChiikiMasterServiceServer) List(context.Context, *Db_ListChiikiMasterRequest) (*Db_ListChiikiMasterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedDb_ChiikiMasterServiceServer) testEmbeddedByValue() {}

// UnsafeDb_ChiikiMasterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Db_ChiikiMasterServiceServer will
// result in compilation errors.
type UnsafeDb_ChiikiMasterServiceServer interface {
	mustEmbedUnimplementedDb_ChiikiMasterServiceServer()
}

func RegisterDb_ChiikiMasterServiceServer(s grpc.ServiceRegistrar, srv Db_ChiikiMasterServiceServer) {
	// If the following call pancis, it indicates UnimplementedDb_ChiikiMasterServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Db_ChiikiMasterService_ServiceDesc, srv)
}

func _Db_ChiikiMasterService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Db_GetChiikiMasterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Db_ChiikiMasterServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Db_ChiikiMasterService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Db_ChiikiMasterServiceServer).Get(ctx, req.(*Db_GetChiikiMasterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Db_ChiikiMasterService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Db_ListChiikiMasterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Db_ChiikiMasterServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Db_ChiikiMasterService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Db_ChiikiMasterServiceServer).List(ctx, req.(*Db_ListChiikiMasterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Db_ChiikiMasterService_ServiceDesc is the grpc.ServiceDesc for Db_ChiikiMasterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Db_ChiikiMasterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "db_service.db_ChiikiMasterService",
	HandlerType: (*Db_ChiikiMasterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Db_ChiikiMasterService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Db_ChiikiMasterService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "db_service.proto",
}

const (
	Db_ChikuMasterService_Get_FullMethodName          = "/db_service.db_ChikuMasterService/Get"
	Db_ChikuMasterService_List_FullMethodName         = "/db_service.db_ChikuMasterService/List"
	Db_ChikuMasterService_GetByChiikiC_FullMethodName = "/db_service.db_ChikuMasterService/GetByChiikiC"
)

// Db_ChikuMasterServiceClient is the client API for Db_ChikuMasterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ChikuMasterService - 地区マスタ管理（SQL Server、読み取り専用）
type Db_ChikuMasterServiceClient interface {
	Get(ctx context.Context, in *Db_GetChikuMasterRequest, opts ...grpc.CallOption) (*Db_ChikuMasterResponse, error)
	List(ctx context.Context, in *Db_ListChikuMasterRequest, opts ...grpc.CallOption) (*Db_ListChikuMasterResponse, error)
	GetByChiikiC(ctx context.Context, in *Db_GetChikuMasterByChiikiCRequest, opts ...grpc.CallOption) (*Db_ListChikuMasterResponse, error)
}

type db_ChikuMasterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDb_ChikuMasterServiceClient(cc grpc.ClientConnInterface) Db_ChikuMasterServiceClient {
	return &db_ChikuMasterServiceClient{cc}
}

func (c *db_ChikuMasterServiceClient) Get(ctx context.Context, in *Db_GetChikuMasterRequest, opts ...grpc.CallOption) (*Db_ChikuMasterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Db_ChikuMasterResponse)
	err := c.cc.Invoke(ctx, Db_ChikuMasterService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *db_ChikuMasterServiceClient) List(ctx context.Context, in *Db_ListChikuMasterRequest, opts ...grpc.CallOption) (*Db_ListChikuMasterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Db_ListChikuMasterResponse)
	err := c.cc.Invoke(ctx, Db_ChikuMasterService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *db_ChikuMasterServiceClient) GetByChiikiC(ctx context.Context, in *Db_GetChikuMasterByChiikiCRequest, opts ...grpc.CallOption) (*Db_ListChikuMasterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Db_ListChikuMasterResponse)
	err := c.cc.Invoke(ctx, Db_ChikuMasterService_GetByChiikiC_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Db_ChikuMasterServiceServer is the server API for Db_ChikuMasterService service.
// All implementations should embed UnimplementedDb_ChikuMasterServiceServer
// for forward compatibility.
//
// ChikuMasterService - 地区マスタ管理（SQL Server、読み取り専用）
type Db_ChikuMasterServiceServer interface {
	Get(context.Context, *Db_GetChikuMasterRequest) (*Db_ChikuMasterResponse, error)
	List(context.Context, *Db_ListChikuMasterRequest) (*Db_ListChikuMasterResponse, error)
	GetByChiikiC(context.Context, *Db_GetChikuMasterByChiikiCRequest) (*Db_ListChikuMasterResponse, error)
}

// UnimplementedDb_ChikuMasterServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDb_ChikuMasterServiceServer struct{}

func (UnimplementedDb_ChikuMasterServiceServer) Get(context.Context, *Db_GetChikuMasterRequest) (*Db_ChikuMasterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedDb_ChikuMasterServiceServer) List(context.Context, *Db_ListChikuMasterRequest) (*Db_ListChikuMasterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedDb_ChikuMasterServiceServer) GetByChiikiC(context.Context, *Db_GetChikuMasterByChiikiCRequest) (*Db_ListChikuMasterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByChiikiC not implemented")
}
func (UnimplementedDb_ChikuMasterServiceServer) testEmbeddedByValue() {}

// UnsafeDb_ChikuMasterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Db_ChikuMasterServiceServer will
// result in compilation errors.
type UnsafeDb_ChikuMasterServiceServer interface {
	mustEmbedUnimplementedDb_ChikuMasterServiceServer()
}

func RegisterDb_ChikuMasterServiceServer(s grpc.ServiceRegistrar, srv Db_ChikuMasterServiceServer) {
	// If the following call pancis, it indicates UnimplementedDb_ChikuMasterServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Db_ChikuMasterService_ServiceDesc, srv)
}

func _Db_ChikuMasterService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Db_GetChikuMasterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Db_ChikuMasterServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Db_ChikuMasterService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Db_ChikuMasterServiceServer).Get(ctx, req.(*Db_GetChikuMasterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Db_ChikuMasterService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Db_ListChikuMasterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Db_ChikuMasterServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Db_ChikuMasterService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Db_ChikuMasterServiceServer).List(ctx, req.(*Db_ListChikuMasterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Db_ChikuMasterService_GetByChiikiC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Db_GetChikuMasterByChiikiCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Db_ChikuMasterServiceServer).GetByChiikiC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Db_ChikuMasterService_GetByChiikiC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Db_ChikuMasterServiceServer).GetByChiikiC(ctx, req.(*Db_GetChikuMasterByChiikiCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Db_ChikuMasterService_ServiceDesc is the grpc.ServiceDesc for Db_ChikuMasterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Db_ChikuMasterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "db_service.db_ChikuMasterService",
	HandlerType: (*Db_ChikuMasterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Db_ChikuMasterService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Db_ChikuMasterService_List_Handler,
		},
		{
			MethodName: "GetByChiikiC",
			Handler:    _Db_ChikuMasterService_GetByChiikiC_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "db_service.proto",
}

const (
	Db_TimeCardService_Get_FullMethodName  = "/db_service.db_TimeCardService/Get"
	Db_TimeCardService_List_FullMethodName = "/db_service.db_TimeCardService/List"
)

// Db_TimeCardServiceClient is the client API for Db_TimeCardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// TimeCardサービス - タイムカードデータ管理（本番DB、読み取り専用）
type Db_TimeCardServiceClient interface {
	// タイムカードデータ取得（複合主キー: datetime + id）
	Get(ctx context.Context, in *Db_GetTimeCardRequest, opts ...grpc.CallOption) (*Db_TimeCardResponse, error)
	// タイムカードデータ一覧取得
	List(ctx context.Context, in *Db_ListTimeCardRequest, opts ...grpc.CallOption) (*Db_ListTimeCardResponse, error)
}

type db_TimeCardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDb_TimeCardServiceClient(cc grpc.ClientConnInterface) Db_TimeCardServiceClient {
	return &db_TimeCardServiceClient{cc}
}

func (c *db_TimeCardServiceClient) Get(ctx context.Context, in *Db_GetTimeCardRequest, opts ...grpc.CallOption) (*Db_TimeCardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Db_TimeCardResponse)
	err := c.cc.Invoke(ctx, Db_TimeCardService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *db_TimeCardServiceClient) List(ctx context.Context, in *Db_ListTimeCardRequest, opts ...grpc.CallOption) (*Db_ListTimeCardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Db_ListTimeCardResponse)
	err := c.cc.Invoke(ctx, Db_TimeCardService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Db_TimeCardServiceServer is the server API for Db_TimeCardService service.
// All implementations should embed UnimplementedDb_TimeCardServiceServer
// for forward compatibility.
//
// TimeCardサービス - タイムカードデータ管理（本番DB、読み取り専用）
type Db_TimeCardServiceServer interface {
	// タイムカードデータ取得（複合主キー: datetime + id）
	Get(context.Context, *Db_GetTimeCardRequest) (*Db_TimeCardResponse, error)
	// タイムカードデータ一覧取得
	List(context.Context, *Db_ListTimeCardRequest) (*Db_ListTimeCardResponse, error)
}

// UnimplementedDb_TimeCardServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDb_TimeCardServiceServer struct{}

func (UnimplementedDb_TimeCardServiceServer) Get(context.Context, *Db_GetTimeCardRequest) (*Db_TimeCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedDb_TimeCardServiceServer) List(context.Context, *Db_ListTimeCardRequest) (*Db_ListTimeCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedDb_TimeCardServiceServer) testEmbeddedByValue() {}

// UnsafeDb_TimeCardServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Db_TimeCardServiceServer will
// result in compilation errors.
type UnsafeDb_TimeCardServiceServer interface {
	mustEmbedUnimplementedDb_TimeCardServiceServer()
}

func RegisterDb_TimeCardServiceServer(s grpc.ServiceRegistrar, srv Db_TimeCardServiceServer) {
	// If the following call pancis, it indicates UnimplementedDb_TimeCardServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Db_TimeCardService_ServiceDesc, srv)
}

func _Db_TimeCardService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Db_GetTimeCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Db_TimeCardServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Db_TimeCardService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Db_TimeCardServiceServer).Get(ctx, req.(*Db_GetTimeCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Db_TimeCardService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Db_ListTimeCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Db_TimeCardServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Db_TimeCardService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Db_TimeCardServiceServer).List(ctx, req.(*Db_ListTimeCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Db_TimeCardService_ServiceDesc is the grpc.ServiceDesc for Db_TimeCardService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Db_TimeCardService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "db_service.db_TimeCardService",
	HandlerType: (*Db_TimeCardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Db_TimeCardService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Db_TimeCardService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "db_service.proto",
}

const (
	Db_TimeCardDevService_Create_FullMethodName = "/db_service.db_TimeCardDevService/Create"
	Db_TimeCardDevService_Get_FullMethodName    = "/db_service.db_TimeCardDevService/Get"
	Db_TimeCardDevService_Update_FullMethodName = "/db_service.db_TimeCardDevService/Update"
	Db_TimeCardDevService_Delete_FullMethodName = "/db_service.db_TimeCardDevService/Delete"
	Db_TimeCardDevService_List_FullMethodName   = "/db_service.db_TimeCardDevService/List"
)

// Db_TimeCardDevServiceClient is the client API for Db_TimeCardDevService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// TimeCardDevサービス - タイムカードデータ管理（ローカルDB、読み書き可能）
type Db_TimeCardDevServiceClient interface {
	// タイムカードデータ作成
	Create(ctx context.Context, in *Db_CreateTimeCardRequest, opts ...grpc.CallOption) (*Db_TimeCardResponse, error)
	// タイムカードデータ取得（複合主キー: datetime + id）
	Get(ctx context.Context, in *Db_GetTimeCardRequest, opts ...grpc.CallOption) (*Db_TimeCardResponse, error)
	// タイムカードデータ更新
	Update(ctx context.Context, in *Db_UpdateTimeCardRequest, opts ...grpc.CallOption) (*Db_TimeCardResponse, error)
	// タイムカードデータ削除
	Delete(ctx context.Context, in *Db_DeleteTimeCardRequest, opts ...grpc.CallOption) (*Db_Empty, error)
	// タイムカードデータ一覧取得
	List(ctx context.Context, in *Db_ListTimeCardRequest, opts ...grpc.CallOption) (*Db_ListTimeCardResponse, error)
}

type db_TimeCardDevServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDb_TimeCardDevServiceClient(cc grpc.ClientConnInterface) Db_TimeCardDevServiceClient {
	return &db_TimeCardDevServiceClient{cc}
}

func (c *db_TimeCardDevServiceClient) Create(ctx context.Context, in *Db_CreateTimeCardRequest, opts ...grpc.CallOption) (*Db_TimeCardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Db_TimeCardResponse)
	err := c.cc.Invoke(ctx, Db_TimeCardDevService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *db_TimeCardDevServiceClient) Get(ctx context.Context, in *Db_GetTimeCardRequest, opts ...grpc.CallOption) (*Db_TimeCardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Db_TimeCardResponse)
	err := c.cc.Invoke(ctx, Db_TimeCardDevService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *db_TimeCardDevServiceClient) Update(ctx context.Context, in *Db_UpdateTimeCardRequest, opts ...grpc.CallOption) (*Db_TimeCardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Db_TimeCardResponse)
	err := c.cc.Invoke(ctx, Db_TimeCardDevService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *db_TimeCardDevServiceClient) Delete(ctx context.Context, in *Db_DeleteTimeCardRequest, opts ...grpc.CallOption) (*Db_Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Db_Empty)
	err := c.cc.Invoke(ctx, Db_TimeCardDevService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *db_TimeCardDevServiceClient) List(ctx context.Context, in *Db_ListTimeCardRequest, opts ...grpc.CallOption) (*Db_ListTimeCardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Db_ListTimeCardResponse)
	err := c.cc.Invoke(ctx, Db_TimeCardDevService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Db_TimeCardDevServiceServer is the server API for Db_TimeCardDevService service.
// All implementations should embed UnimplementedDb_TimeCardDevServiceServer
// for forward compatibility.
//
// TimeCardDevサービス - タイムカードデータ管理（ローカルDB、読み書き可能）
type Db_TimeCardDevServiceServer interface {
	// タイムカードデータ作成
	Create(context.Context, *Db_CreateTimeCardRequest) (*Db_TimeCardResponse, error)
	// タイムカードデータ取得（複合主キー: datetime + id）
	Get(context.Context, *Db_GetTimeCardRequest) (*Db_TimeCardResponse, error)
	// タイムカードデータ更新
	Update(context.Context, *Db_UpdateTimeCardRequest) (*Db_TimeCardResponse, error)
	// タイムカードデータ削除
	Delete(context.Context, *Db_DeleteTimeCardRequest) (*Db_Empty, error)
	// タイムカードデータ一覧取得
	List(context.Context, *Db_ListTimeCardRequest) (*Db_ListTimeCardResponse, error)
}

// UnimplementedDb_TimeCardDevServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDb_TimeCardDevServiceServer struct{}

func (UnimplementedDb_TimeCardDevServiceServer) Create(context.Context, *Db_CreateTimeCardRequest) (*Db_TimeCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedDb_TimeCardDevServiceServer) Get(context.Context, *Db_GetTimeCardRequest) (*Db_TimeCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedDb_TimeCardDevServiceServer) Update(context.Context, *Db_UpdateTimeCardRequest) (*Db_TimeCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedDb_TimeCardDevServiceServer) Delete(context.Context, *Db_DeleteTimeCardRequest) (*Db_Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedDb_TimeCardDevServiceServer) List(context.Context, *Db_ListTimeCardRequest) (*Db_ListTimeCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedDb_TimeCardDevServiceServer) testEmbeddedByValue() {}

// UnsafeDb_TimeCardDevServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Db_TimeCardDevServiceServer will
// result in compilation errors.
type UnsafeDb_TimeCardDevServiceServer interface {
	mustEmbedUnimplementedDb_TimeCardDevServiceServer()
}

func RegisterDb_TimeCardDevServiceServer(s grpc.ServiceRegistrar, srv Db_TimeCardDevServiceServer) {
	// If the following call pancis, it indicates UnimplementedDb_TimeCardDevServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Db_TimeCardDevService_ServiceDesc, srv)
}

func _Db_TimeCardDevService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Db_CreateTimeCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Db_TimeCardDevServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Db_TimeCardDevService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Db_TimeCardDevServiceServer).Create(ctx, req.(*Db_CreateTimeCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Db_TimeCardDevService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Db_GetTimeCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Db_TimeCardDevServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Db_TimeCardDevService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Db_TimeCardDevServiceServer).Get(ctx, req.(*Db_GetTimeCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Db_TimeCardDevService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Db_UpdateTimeCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Db_TimeCardDevServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Db_TimeCardDevService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Db_TimeCardDevServiceServer).Update(ctx, req.(*Db_UpdateTimeCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Db_TimeCardDevService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Db_DeleteTimeCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Db_TimeCardDevServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Db_TimeCardDevService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Db_TimeCardDevServiceServer).Delete(ctx, req.(*Db_DeleteTimeCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Db_TimeCardDevService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Db_ListTimeCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Db_TimeCardDevServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Db_TimeCardDevService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Db_TimeCardDevServiceServer).List(ctx, req.(*Db_ListTimeCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Db_TimeCardDevService_ServiceDesc is the grpc.ServiceDesc for Db_TimeCardDevService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Db_TimeCardDevService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "db_service.db_TimeCardDevService",
	HandlerType: (*Db_TimeCardDevServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Db_TimeCardDevService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Db_TimeCardDevService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Db_TimeCardDevService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Db_TimeCardDevService_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Db_TimeCardDevService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "db_service.proto",
}

const (
	Db_TimeCardLogService_Create_FullMethodName      = "/db_service.db_TimeCardLogService/Create"
	Db_TimeCardLogService_Get_FullMethodName         = "/db_service.db_TimeCardLogService/Get"
	Db_TimeCardLogService_Update_FullMethodName      = "/db_service.db_TimeCardLogService/Update"
	Db_TimeCardLogService_Delete_FullMethodName      = "/db_service.db_TimeCardLogService/Delete"
	Db_TimeCardLogService_List_FullMethodName        = "/db_service.db_TimeCardLogService/List"
	Db_TimeCardLogService_GetByCardID_FullMethodName = "/db_service.db_TimeCardLogService/GetByCardID"
)

// Db_TimeCardLogServiceClient is the client API for Db_TimeCardLogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// db_TimeCardLogServiceサービス - タイムカードログデータ管理（ローカルDB）
type Db_TimeCardLogServiceClient interface {
	// タイムカードログ作成
	Create(ctx context.Context, in *Db_CreateTimeCardLogRequest, opts ...grpc.CallOption) (*Db_TimeCardLogResponse, error)
	// タイムカードログ取得（複合主キー: datetime + id）
	Get(ctx context.Context, in *Db_GetTimeCardLogRequest, opts ...grpc.CallOption) (*Db_TimeCardLogResponse, error)
	// タイムカードログ更新
	Update(ctx context.Context, in *Db_UpdateTimeCardLogRequest, opts ...grpc.CallOption) (*Db_TimeCardLogResponse, error)
	// タイムカードログ削除
	Delete(ctx context.Context, in *Db_DeleteTimeCardLogRequest, opts ...grpc.CallOption) (*Db_Empty, error)
	// タイムカードログ一覧取得
	List(ctx context.Context, in *Db_ListTimeCardLogRequest, opts ...grpc.CallOption) (*Db_ListTimeCardLogResponse, error)
	// カードIDでタイムカードログ取得
	GetByCardID(ctx context.Context, in *Db_GetByCardIDRequest, opts ...grpc.CallOption) (*Db_ListTimeCardLogResponse, error)
}

type db_TimeCardLogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDb_TimeCardLogServiceClient(cc grpc.ClientConnInterface) Db_TimeCardLogServiceClient {
	return &db_TimeCardLogServiceClient{cc}
}

func (c *db_TimeCardLogServiceClient) Create(ctx context.Context, in *Db_CreateTimeCardLogRequest, opts ...grpc.CallOption) (*Db_TimeCardLogResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Db_TimeCardLogResponse)
	err := c.cc.Invoke(ctx, Db_TimeCardLogService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *db_TimeCardLogServiceClient) Get(ctx context.Context, in *Db_GetTimeCardLogRequest, opts ...grpc.CallOption) (*Db_TimeCardLogResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Db_TimeCardLogResponse)
	err := c.cc.Invoke(ctx, Db_TimeCardLogService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *db_TimeCardLogServiceClient) Update(ctx context.Context, in *Db_UpdateTimeCardLogRequest, opts ...grpc.CallOption) (*Db_TimeCardLogResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Db_TimeCardLogResponse)
	err := c.cc.Invoke(ctx, Db_TimeCardLogService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *db_TimeCardLogServiceClient) Delete(ctx context.Context, in *Db_DeleteTimeCardLogRequest, opts ...grpc.CallOption) (*Db_Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Db_Empty)
	err := c.cc.Invoke(ctx, Db_TimeCardLogService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *db_TimeCardLogServiceClient) List(ctx context.Context, in *Db_ListTimeCardLogRequest, opts ...grpc.CallOption) (*Db_ListTimeCardLogResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Db_ListTimeCardLogResponse)
	err := c.cc.Invoke(ctx, Db_TimeCardLogService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *db_TimeCardLogServiceClient) GetByCardID(ctx context.Context, in *Db_GetByCardIDRequest, opts ...grpc.CallOption) (*Db_ListTimeCardLogResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Db_ListTimeCardLogResponse)
	err := c.cc.Invoke(ctx, Db_TimeCardLogService_GetByCardID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Db_TimeCardLogServiceServer is the server API for Db_TimeCardLogService service.
// All implementations should embed UnimplementedDb_TimeCardLogServiceServer
// for forward compatibility.
//
// db_TimeCardLogServiceサービス - タイムカードログデータ管理（ローカルDB）
type Db_TimeCardLogServiceServer interface {
	// タイムカードログ作成
	Create(context.Context, *Db_CreateTimeCardLogRequest) (*Db_TimeCardLogResponse, error)
	// タイムカードログ取得（複合主キー: datetime + id）
	Get(context.Context, *Db_GetTimeCardLogRequest) (*Db_TimeCardLogResponse, error)
	// タイムカードログ更新
	Update(context.Context, *Db_UpdateTimeCardLogRequest) (*Db_TimeCardLogResponse, error)
	// タイムカードログ削除
	Delete(context.Context, *Db_DeleteTimeCardLogRequest) (*Db_Empty, error)
	// タイムカードログ一覧取得
	List(context.Context, *Db_ListTimeCardLogRequest) (*Db_ListTimeCardLogResponse, error)
	// カードIDでタイムカードログ取得
	GetByCardID(context.Context, *Db_GetByCardIDRequest) (*Db_ListTimeCardLogResponse, error)
}

// UnimplementedDb_TimeCardLogServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDb_TimeCardLogServiceServer struct{}

func (UnimplementedDb_TimeCardLogServiceServer) Create(context.Context, *Db_CreateTimeCardLogRequest) (*Db_TimeCardLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedDb_TimeCardLogServiceServer) Get(context.Context, *Db_GetTimeCardLogRequest) (*Db_TimeCardLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedDb_TimeCardLogServiceServer) Update(context.Context, *Db_UpdateTimeCardLogRequest) (*Db_TimeCardLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedDb_TimeCardLogServiceServer) Delete(context.Context, *Db_DeleteTimeCardLogRequest) (*Db_Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedDb_TimeCardLogServiceServer) List(context.Context, *Db_ListTimeCardLogRequest) (*Db_ListTimeCardLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedDb_TimeCardLogServiceServer) GetByCardID(context.Context, *Db_GetByCardIDRequest) (*Db_ListTimeCardLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByCardID not implemented")
}
func (UnimplementedDb_TimeCardLogServiceServer) testEmbeddedByValue() {}

// UnsafeDb_TimeCardLogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Db_TimeCardLogServiceServer will
// result in compilation errors.
type UnsafeDb_TimeCardLogServiceServer interface {
	mustEmbedUnimplementedDb_TimeCardLogServiceServer()
}

func RegisterDb_TimeCardLogServiceServer(s grpc.ServiceRegistrar, srv Db_TimeCardLogServiceServer) {
	// If the following call pancis, it indicates UnimplementedDb_TimeCardLogServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Db_TimeCardLogService_ServiceDesc, srv)
}

func _Db_TimeCardLogService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Db_CreateTimeCardLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Db_TimeCardLogServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Db_TimeCardLogService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Db_TimeCardLogServiceServer).Create(ctx, req.(*Db_CreateTimeCardLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Db_TimeCardLogService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Db_GetTimeCardLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Db_TimeCardLogServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Db_TimeCardLogService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Db_TimeCardLogServiceServer).Get(ctx, req.(*Db_GetTimeCardLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Db_TimeCardLogService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Db_UpdateTimeCardLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Db_TimeCardLogServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Db_TimeCardLogService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Db_TimeCardLogServiceServer).Update(ctx, req.(*Db_UpdateTimeCardLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Db_TimeCardLogService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Db_DeleteTimeCardLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Db_TimeCardLogServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Db_TimeCardLogService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Db_TimeCardLogServiceServer).Delete(ctx, req.(*Db_DeleteTimeCardLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Db_TimeCardLogService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Db_ListTimeCardLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Db_TimeCardLogServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Db_TimeCardLogService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Db_TimeCardLogServiceServer).List(ctx, req.(*Db_ListTimeCardLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Db_TimeCardLogService_GetByCardID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Db_GetByCardIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Db_TimeCardLogServiceServer).GetByCardID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Db_TimeCardLogService_GetByCardID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Db_TimeCardLogServiceServer).GetByCardID(ctx, req.(*Db_GetByCardIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Db_TimeCardLogService_ServiceDesc is the grpc.ServiceDesc for Db_TimeCardLogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Db_TimeCardLogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "db_service.db_TimeCardLogService",
	HandlerType: (*Db_TimeCardLogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Db_TimeCardLogService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Db_TimeCardLogService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Db_TimeCardLogService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Db_TimeCardLogService_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Db_TimeCardLogService_List_Handler,
		},
		{
			MethodName: "GetByCardID",
			Handler:    _Db_TimeCardLogService_GetByCardID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "db_service.proto",
}
